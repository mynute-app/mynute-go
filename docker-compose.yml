# dev and test : docker compose -p kaki-go -f docker-compose.yml up -d --force-recreate
# production : docker compose -p kaki-go -f docker-compose.yml --profile production up -d --force-recreate

services:
  postgres:
    container_name: postgresdb-kaki
    image: postgres:17.0
    restart: always
    volumes:
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      APP_ENV: ${APP_ENV}
    ports:
      - "${POSTGRES_PORT}:5432"
    command: [ "bash", "-c", "docker-entrypoint.sh postgres & sleep 5 && bash /docker-entrypoint-initdb.d/init-db.sh && wait" ]
    networks:
      - kaki-network

  pgadmin:
    container_name: pgadmin4-kaki
    image: dpage/pgadmin4:9
    restart: always
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      MAX_LOGIN_ATTEMPTS: ${MAX_LOGIN_ATTEMPTS}
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - kaki-network

  fiber-app:
    container_name: fiber-api-kaki
    build: .
    restart: always
    environment:
      - APP_ENV=${APP_ENV}
      - PORT=${APP_PORT}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      - postgres
    networks:
      - kaki-network
    profiles:
      - production  # Runs only in production

  prometheus:
    container_name: prometheus-kaki
    image: prom/prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - postgres
    networks:
      - kaki-network

  grafana:
    container_name: grafana-kaki
    image: grafana/grafana
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - kaki-network

networks:
  kaki-network:

volumes:
  postgres-data:
  pgadmin-data:
  grafana-data: