# dev and test : docker compose -p kaki-go -f docker-compose.yml up -d --force-recreate
# production : docker compose -p kaki-go -f docker-compose.yml --profile production up -d --force-recreate

services:
  postgres:
    container_name: postgresdb-kaki
    image: postgres:17.0
    restart: always
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    command: >
      bash -c "
        echo 'âœ… Starting PostgreSQL...';

        docker-entrypoint.sh postgres &

        echo 'âœ… Starting custom initialization process...';
        
        sleep 10;
        
        # Ensure the main database exists
        echo 'Checking if main database \"$POSTGRES_DB\" exists...';
        MAIN_DB_EXISTS=$(psql -U \"$POSTGRES_USER\" -d postgres -tAc \"SELECT 1 FROM pg_database WHERE datname='$POSTGRES_DB'\");
        
        if [ \"$MAIN_DB_EXISTS\" == \"1\" ]; then
          echo 'âœ… Main database \"$POSTGRES_DB\" already exists.';
        else
          echo 'ðŸš€ Creating main database: \"$POSTGRES_DB\"';
          psql -U \"$POSTGRES_USER\" -d postgres -c \"CREATE DATABASE \\\"$POSTGRES_DB\\\";\";
        fi;
        
        # Check if APP_ENV is set to "test" and create additional test database
        if [ \"$APP_ENV\" == \"test\" ]; then
          echo \"Checking if test database '$POSTGRES_DB_TEST' exists...\";
          
          TEST_DB_EXISTS=$(psql -U \"$POSTGRES_USER\" -d postgres -tAc \"SELECT 1 FROM pg_database WHERE datname='$POSTGRES_DB_TEST'\");
          
          if [ \"$TEST_DB_EXISTS\" == \"1\" ]; then
            echo 'âœ… Test database \"$POSTGRES_DB_TEST\" already exists.';
          else
            echo 'ðŸš€ Creating test database: \"$POSTGRES_DB_TEST\"';
            psql -U \"$POSTGRES_USER\" -d postgres -c \"CREATE DATABASE \\\"$POSTGRES_DB_TEST\\\";\";
          fi;
        else
          echo 'APP_ENV is not \"test\". Skipping test database creation.';
        fi;
        
        echo 'ðŸŽ‰ Database initialization complete!';
        
        wait
      "
    networks:
      - kaki-network

  pgadmin:
    container_name: pgadmin4-kaki
    image: dpage/pgadmin4:9
    restart: always
    volumes:
      - ./pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      MAX_LOGIN_ATTEMPTS: ${MAX_LOGIN_ATTEMPTS}
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - kaki-network

  fiber-app:
    container_name: fiber-api-kaki
    build: .
    restart: always
    environment:
      - APP_ENV=${APP_ENV}
      - PORT=${APP_PORT}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      - postgres
    networks:
      - kaki-network
    profiles:
      - production  # Runs only in production

  prometheus:
    container_name: prometheus-kaki
    image: prom/prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - postgres
    networks:
      - kaki-network

  grafana:
    container_name: grafana-kaki
    image: grafana/grafana
    restart: always
    volumes:
      - ./grafana-data:/var/lib/grafana
    ports:
      - "${GRAFANA_ALIAS_PORT}:${GRAFANA_PORT}"
    depends_on:
      - prometheus
    networks:
      - kaki-network
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      
networks:
  kaki-network:

volumes:
  postgres-data:
  pgadmin-data:
  grafana-data: