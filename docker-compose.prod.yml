version: '3.8'
# # RUN line below for prod in local machine # #
# # # docker compose -p mynuteapp-backend-main-go-qibr49 -f ./docker-compose.prod.yml up -d --build --remove-orphans

# # ADD line below for prod in VPS using Dokploy at Advanced > Run Command # #
# compose build --no-cache && docker compose up -d --force-recreate

services:
  postgres:
    image: postgres:17.5
    restart: always
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 300s
      timeout: 5s
      retries: 10
      start_period: 5s
    command: >
      bash -c "
        echo '‚úÖ   Starting PostgreSQL...';
        docker-entrypoint.sh postgres & 

        # Wait for PostgreSQL to be fully ready
        echo '‚è≥   Waiting for PostgreSQL to start...';
        until pg_isready -h localhost -p 5432 -U $POSTGRES_USER; do
          echo '‚è≥   Still waiting for PostgreSQL...';
          sleep 5;
        done;

        echo '‚úÖ   PostgreSQL is ready! Proceeding with initialization...';

        # Ensure the main database exists
        echo \"Checking if main database '$POSTGRES_DB' exists...\";
        if psql -U \"$POSTGRES_USER\" -d postgres -tAc \"SELECT 1 FROM pg_database WHERE datname='$POSTGRES_DB'\" | grep -q 1; then
          echo '‚úÖ   Main database \"$POSTGRES_DB\" already exists.';
        else
          echo 'üöÄ   Creating main database: \"$POSTGRES_DB\"';
          psql -U \"$POSTGRES_USER\" -d postgres -c \"CREATE DATABASE \\\"$POSTGRES_DB\\\";\";
        fi;

        # Check if test database exists and create schema 'public'
        echo \"Checking if test database '$POSTGRES_DB_TEST' exists...\";
        if psql -U \"$POSTGRES_USER\" -d postgres -tAc \"SELECT 1 FROM pg_database WHERE datname='$POSTGRES_DB_TEST'\" | grep -q 1; then
          echo '‚úÖ   Test database \"$POSTGRES_DB_TEST\" already exists.';
        else
          echo 'üöÄ   Creating test database: \"$POSTGRES_DB_TEST\"';
          psql -U \"$POSTGRES_USER\" -d postgres -c \"CREATE DATABASE \\\"$POSTGRES_DB_TEST\\\";\";
        fi;

        echo \"Checking if dev database '$POSTGRES_DB_DEV' exists...\";
        if psql -U \"$POSTGRES_USER\" -d postgres -tAc \"SELECT 1 FROM pg_database WHERE datname='$POSTGRES_DB_DEV'\" | grep -q 1; then
          echo '‚úÖ   Dev database \"$POSTGRES_DB_DEV\" already exists.';
        else
          echo 'üöÄ   Creating dev database: \"$POSTGRES_DB_DEV\"';
          psql -U \"$POSTGRES_USER\" -d postgres -c \"CREATE DATABASE \\\"$POSTGRES_DB_DEV\\\";\";
        fi;

        echo 'üîß   Ensuring schema public exists on main database...'
        psql -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -c 'CREATE SCHEMA IF NOT EXISTS public;';
        
        echo 'üîß   Ensuring schema public exists on test database...';
        psql -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB_TEST\" -c 'CREATE SCHEMA IF NOT EXISTS public;';

        echo 'üîß   Ensuring schema public exists on dev database...'
        psql -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB_DEV\" -c 'CREATE SCHEMA IF NOT EXISTS public;';

        echo 'üéâ   Database initialization complete!';

        # Keep PostgreSQL running in the foreground to prevent container exit
        wait
      "
    networks:
      - mynute-app-network

  go-backend-app:
    build: .
    restart: always
    env_file:
      - .env
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      grafana:
        condition: service_started
      loki:
        condition: service_started
    networks:
      - mynute-app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.mynute.app`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=${APP_PORT}"

  prometheus:
    image: prom/prometheus:v3.4.1
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - postgres
    networks:
      - mynute-app-network

  grafana:
    image: grafana/grafana:12.0.1
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "${GRAFANA_ALIAS_PORT}:${GRAFANA_PORT}"
    depends_on:
      - prometheus
    networks:
      - mynute-app-network
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.mynute.app`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=${GRAFANA_PORT}"

  loki:
    user: root
    restart: always
    image: grafana/loki:3.5.1
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/loki-config.yaml
      - loki-index:/loki/index
      - loki-cache:/loki/cache
      - loki-chunks:/loki/chunks
      - loki-compactor:/loki/compactor
      - loki-wal:/loki/wal
    networks:
      - mynute-app-network
      
networks:
  mynute-app-network:

volumes:
  postgres-data:
  pgadmin-data:
  grafana-data:
  loki-index:
  loki-cache:
  loki-chunks:
  loki-compactor:
  loki-wal:
  minio-data:
