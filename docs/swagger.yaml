basePath: /
definitions:
  DTO.Branch:
    properties:
      city:
        type: string
      company_id:
        type: integer
      complement:
        type: string
      country:
        type: string
      employees:
        items:
          $ref: '#/definitions/DTO.UserPopulated'
        type: array
      id:
        type: integer
      name:
        type: string
      neighborhood:
        type: string
      number:
        type: string
      services:
        items:
          $ref: '#/definitions/DTO.ServicePopulated'
        type: array
      state:
        type: string
      street:
        type: string
      zip_code:
        type: string
    type: object
  DTO.Company:
    description: Company DTO
    properties:
      branches:
        items:
          $ref: '#/definitions/DTO.Branch'
        type: array
      company_types:
        items:
          $ref: '#/definitions/DTO.CompanyType'
        type: array
      employees:
        items:
          $ref: '#/definitions/DTO.UserPopulated'
        type: array
      id:
        description: Primary key
        type: integer
      name:
        example: Your Company Name
        type: string
      services:
        items:
          $ref: '#/definitions/DTO.ServicePopulated'
        type: array
      tax_id:
        example: "00000000000000"
        type: string
    type: object
  DTO.CompanyType:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  DTO.ErrorResponse:
    description: Error Response Model
    properties:
      message:
        example: Not Found
        type: string
    type: object
  DTO.ServicePopulated:
    properties:
      description:
        type: string
      duration:
        type: integer
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
    type: object
  DTO.UserPopulated:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      surname:
        type: string
    type: object
host: localhost:4000
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: Swagger API for testing and debugging
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Example API
  version: "1.0"
paths:
  /{resource}:
    get:
      description: Retrieve all records of a given resource
      parameters:
      - description: Resource Name
        in: path
        name: resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items: {}
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get all records
      tags:
      - AutoGenerated
    post:
      consumes:
      - application/json
      description: Create a new entity
      parameters:
      - description: Resource Name
        in: path
        name: resource
        required: true
        type: string
      - description: Entity Data
        in: body
        name: entity
        required: true
        schema: {}
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema: {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Create a new record
      tags:
      - AutoGenerated
  /{resource}/{id}:
    delete:
      description: Soft delete an entity
      parameters:
      - description: Resource Name
        in: path
        name: resource
        required: true
        type: string
      - description: Record ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Delete a record by ID
      tags:
      - AutoGenerated
    get:
      description: Retrieve a single record by its ID
      parameters:
      - description: Resource Name
        in: path
        name: resource
        required: true
        type: string
      - description: Record ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get a record by ID
      tags:
      - AutoGenerated
    patch:
      description: Update an existing record
      parameters:
      - description: Resource Name
        in: path
        name: resource
        required: true
        type: string
      - description: Record ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Entity Data
        in: body
        name: entity
        required: true
        schema: {}
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Update a record by ID
      tags:
      - AutoGenerated
  /{resource}/{id}/force:
    delete:
      description: Permanently delete an entity
      parameters:
      - description: Resource Name
        in: path
        name: resource
        required: true
        type: string
      - description: Record ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Force delete a record
      tags:
      - AutoGenerated
    get:
      description: Retrieve a single record by its ID including soft-deleted ones
      parameters:
      - description: Resource Name
        in: path
        name: resource
        required: true
        type: string
      - description: Record ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items: {}
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get all records (force)
      tags:
      - AutoGenerated
  /{resource}/force:
    get:
      description: Retrieve all records including soft-deleted ones
      parameters:
      - description: Resource Name
        in: path
        name: resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items: {}
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get all records (force)
      tags:
      - AutoGenerated
  /company:
    post:
      consumes:
      - application/json
      description: Create a company
      parameters:
      - description: Company
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/DTO.Company'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Create company
      tags:
      - Company
  /company/{id}:
    delete:
      description: Delete a company by its ID
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Company'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Delete company by ID
      tags:
      - Company
    get:
      description: Retrieve a company by its ID
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Company'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get company by ID
      tags:
      - Company
    patch:
      consumes:
      - application/json
      description: Update a company by its ID
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      - description: Company
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/DTO.Company'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Company'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Update company by ID
      tags:
      - Company
  /company/name/{name}:
    get:
      description: Retrieve a company by its name
      parameters:
      - description: Company Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Company'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get company by name
      tags:
      - Company
  /company/tax_id/{tax_id}:
    get:
      description: Retrieve a company by its tax identification number
      parameters:
      - description: Company Tax ID
        in: path
        name: tax_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Company'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get company by tax ID
      tags:
      - Company
swagger: "2.0"
