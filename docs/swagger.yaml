definitions:
  DTO.Appointment:
    properties:
      branch_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      cancel_time:
        example: "2021-01-01T08:00:00Z"
        type: string
      cancelled:
        example: false
        type: boolean
      cancelled_employee_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      client_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      comments:
        items:
          $ref: '#/definitions/dJSON.Comment'
        type: array
      company_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      employee_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      end_time:
        example: "2021-01-01T10:00:00Z"
        type: string
      history:
        $ref: '#/definitions/dJSON.AppointmentHistory'
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      is_cancelled:
        example: true
        type: boolean
      is_cancelled_by_client:
        example: false
        type: boolean
      is_cancelled_by_employee:
        example: true
        type: boolean
      is_confirmed_by_client:
        example: true
        type: boolean
      is_fulfilled:
        example: false
        type: boolean
      payment_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      rescheduled:
        example: false
        type: boolean
      service_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      start_time:
        example: "2021-01-01T09:00:00Z"
        type: string
      time_zone:
        example: America/New_York
        type: string
    type: object
  DTO.BranchBase:
    description: Branch Base DTO
    properties:
      city:
        example: New York
        type: string
      company_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      complement:
        example: Suite 100
        type: string
      country:
        example: USA
        type: string
      design:
        $ref: '#/definitions/mJSON.DesignConfig'
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      name:
        example: Main Branch
        type: string
      neighborhood:
        example: Downtown
        type: string
      number:
        example: "456"
        type: string
      state:
        example: NY
        type: string
      street:
        example: 123 Main St
        type: string
      time_zone:
        description: Time zone in IANA format
        example: America/New_York
        type: string
      zip_code:
        example: "10001"
        type: string
    type: object
  DTO.BranchFull:
    description: Branch Full DTO
    properties:
      appointments:
        items:
          $ref: '#/definitions/DTO.Appointment'
        type: array
      branch_density:
        type: integer
      city:
        example: New York
        type: string
      company_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      complement:
        example: Suite 100
        type: string
      country:
        example: USA
        type: string
      design:
        $ref: '#/definitions/mJSON.DesignConfig'
      employees:
        items:
          $ref: '#/definitions/DTO.EmployeeBase'
        type: array
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      name:
        example: Main Branch
        type: string
      neighborhood:
        example: Downtown
        type: string
      number:
        example: "456"
        type: string
      service_density:
        items:
          $ref: '#/definitions/DTO.ServiceDensity'
        type: array
      services:
        items:
          $ref: '#/definitions/DTO.ServiceBase'
        type: array
      state:
        example: NY
        type: string
      street:
        example: 123 Main St
        type: string
      time_zone:
        description: Time zone in IANA format
        example: America/New_York
        type: string
      zip_code:
        example: "10001"
        type: string
    type: object
  DTO.BranchWorkRange:
    description: represents a work range for a branch, including its ID and the data
      required to create it.
    properties:
      branch_id:
        description: Branch ID
        example: 00000000-0000-0000-0000-000000000000
        type: string
      end_time:
        description: End time (date ignored)
        example: "17:00"
        format: HH:mm
        type: string
      id:
        description: Work range ID
        example: 00000000-0000-0000-0000-000000000000
        type: string
      services:
        description: List of services associated with the work range
        items:
          type: object
        type: array
      start_time:
        description: Start time (date ignored)
        example: "09:00"
        format: HH:mm
        type: string
      time_zone:
        description: Timezone in IANA format, e.g., "America/New_York"
        example: America/New_York
        type: string
      weekday:
        description: Weekday (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
        example: 1
        type: integer
    type: object
  DTO.Client:
    properties:
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      name:
        example: John
        type: string
      phone:
        example: "+15555555555"
        type: string
      surname:
        example: Doe
        type: string
      verified:
        example: false
        type: boolean
    type: object
  DTO.CompanyBase:
    description: Company Base DTO
    properties:
      design:
        $ref: '#/definitions/mJSON.DesignConfig'
      id:
        description: Primary key
        example: 00000000-0000-0000-0000-000000000000
        type: string
      legal_name:
        example: Your Company Legal Name
        type: string
      sectors:
        items:
          $ref: '#/definitions/DTO.Sector'
        type: array
      subdomains:
        items:
          $ref: '#/definitions/DTO.Subdomain'
        type: array
      tax_id:
        example: "00000000000000"
        type: string
      trading_name:
        example: Your Company Trading Name
        type: string
    type: object
  DTO.CompanyFull:
    description: Company Full DTO
    properties:
      branches:
        items:
          $ref: '#/definitions/DTO.BranchBase'
        type: array
      design:
        $ref: '#/definitions/mJSON.DesignConfig'
      employees:
        items:
          $ref: '#/definitions/DTO.EmployeeBase'
        type: array
      id:
        description: Primary key
        example: 00000000-0000-0000-0000-000000000000
        type: string
      legal_name:
        example: Your Company Legal Name
        type: string
      sectors:
        items:
          $ref: '#/definitions/DTO.Sector'
        type: array
      services:
        items:
          $ref: '#/definitions/DTO.ServiceBase'
        type: array
      subdomains:
        items:
          $ref: '#/definitions/DTO.Subdomain'
        type: array
      tax_id:
        example: "00000000000000"
        type: string
      trading_name:
        example: Your Company Trading Name
        type: string
    type: object
  DTO.CreateAppointment:
    properties:
      branch_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      client_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      company_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      employee_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      service_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      start_time:
        example: "2028-01-01T09:00:00Z"
        type: string
      time_zone:
        description: Timezone in IANA format, e.g., "America/New_York"
        example: America/New_York
        type: string
    type: object
  DTO.CreateBranch:
    description: Branch Create DTO
    properties:
      city:
        example: New York
        type: string
      company_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      complement:
        example: Suite 100
        type: string
      country:
        example: USA
        type: string
      name:
        example: Main Branch
        type: string
      neighborhood:
        example: Downtown
        type: string
      number:
        example: "456"
        type: string
      state:
        example: NY
        type: string
      street:
        example: 123 Main St
        type: string
      time_zone:
        description: Time zone in IANA format
        example: America/New_York
        type: string
      zip_code:
        example: "10001"
        type: string
    type: object
  DTO.CreateBranchWorkRange:
    description: represents the data required to create a work range for a branch.
    properties:
      branch_id:
        description: Branch ID
        example: 00000000-0000-0000-0000-000000000000
        type: string
      end_time:
        description: End time (date ignored)
        example: "17:00"
        format: HH:mm
        type: string
      services:
        description: List of services associated with the work range
        items:
          type: object
        type: array
      start_time:
        description: Start time (date ignored)
        example: "09:00"
        format: HH:mm
        type: string
      time_zone:
        description: Timezone in IANA format, e.g., "America/New_York"
        example: America/New_York
        type: string
      weekday:
        description: Weekday (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
        example: 1
        type: integer
    type: object
  DTO.CreateBranchWorkSchedule:
    description: represents the data required to create a work schedule for a branch.
    properties:
      branch_work_ranges:
        items:
          $ref: '#/definitions/DTO.CreateBranchWorkRange'
        type: array
    type: object
  DTO.CreateClient:
    properties:
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John
        type: string
      password:
        example: 1SecurePswd!
        type: string
      phone:
        example: "+15555555555"
        type: string
      surname:
        example: Doe
        type: string
    type: object
  DTO.CreateCompany:
    properties:
      name:
        example: Your Company Legal Name
        type: string
      owner_email:
        example: john.clark@gmail.com
        type: string
      owner_name:
        example: John
        type: string
      owner_password:
        example: 1SecurePswd!
        type: string
      owner_phone:
        example: "+15555555555"
        type: string
      owner_surname:
        example: Clark
        type: string
      owner_time_zone:
        description: Use a valid timezone
        example: America/Sao_Paulo
        type: string
      start_subdomain:
        example: your-company-subdomain
        type: string
      tax_id:
        example: "00000000000000"
        type: string
      trading_name:
        example: Your Company Trading Name
        type: string
    required:
    - owner_email
    - owner_password
    - owner_phone
    - owner_time_zone
    - start_subdomain
    type: object
  DTO.CreateEmployee:
    properties:
      company_id:
        type: string
      email:
        example: joseph.doe@example.com
        type: string
      name:
        example: Joseph
        type: string
      password:
        example: 1SecurePswd!
        type: string
      phone:
        example: "+15555555551"
        type: string
      role:
        example: client
        type: string
      surname:
        example: Doe
        type: string
      time_zone:
        description: Use a valid timezone
        example: America/Sao_Paulo
        type: string
    type: object
  DTO.CreateEmployeeWorkRange:
    description: represents the data required to create a work range for an employee.
    properties:
      branch_id:
        description: Branch ID
        example: 00000000-0000-0000-0000-000000000000
        type: string
      employee_id:
        description: Employee ID
        example: 00000000-0000-0000-0000-000000000000
        type: string
      end_time:
        description: End time (date ignored)
        example: "17:00"
        format: HH:mm
        type: string
      services:
        description: List of services associated with the work range
        items:
          type: object
        type: array
      start_time:
        description: Start time (date ignored)
        example: "09:00"
        format: HH:mm
        type: string
      time_zone:
        description: Timezone in IANA format, e.g., "America/New_York"
        example: America/New_York
        type: string
      weekday:
        description: Weekday (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
        example: 1
        type: integer
    type: object
  DTO.CreateEmployeeWorkSchedule:
    description: represents the data required to create a work schedule for an employee.
    properties:
      employee_work_ranges:
        description: List of work ranges for the employee
        items:
          $ref: '#/definitions/DTO.CreateEmployeeWorkRange'
        type: array
    type: object
  DTO.CreateService:
    properties:
      company_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      description:
        example: A 60-minute in-depth business consultation
        type: string
      duration:
        example: 60
        type: integer
      name:
        example: Premium Consultation
        type: string
      price:
        example: 150
        type: integer
    type: object
  DTO.EmployeeBase:
    description: Employee Base DTO
    properties:
      company_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      name:
        example: John
        type: string
      phone:
        example: "+15555555555"
        type: string
      surname:
        example: Doe
        type: string
    type: object
  DTO.EmployeeFull:
    description: Employee Full DTO
    properties:
      appointments:
        items:
          $ref: '#/definitions/DTO.Appointment'
        type: array
      branches:
        items:
          $ref: '#/definitions/DTO.BranchBase'
        type: array
      company_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      design:
        $ref: '#/definitions/mJSON.DesignConfig'
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      name:
        example: John
        type: string
      phone:
        example: "+15555555555"
        type: string
      roles:
        items:
          $ref: '#/definitions/DTO.RolePopulated'
        type: array
      services:
        items:
          $ref: '#/definitions/DTO.ServiceBase'
        type: array
      surname:
        example: Doe
        type: string
      verified:
        example: true
        type: boolean
      work_schedule:
        items:
          $ref: '#/definitions/DTO.EmployeeWorkRange'
        type: array
    type: object
  DTO.EmployeeWorkRange:
    description: represents a work range for an employee, including its ID and the
      data required to create it.
    properties:
      branch_id:
        description: Branch ID
        example: 00000000-0000-0000-0000-000000000000
        type: string
      employee_id:
        description: Employee ID
        example: 00000000-0000-0000-0000-000000000000
        type: string
      end_time:
        description: End time (date ignored)
        example: "17:00"
        format: HH:mm
        type: string
      id:
        description: Work range ID
        example: 00000000-0000-0000-0000-000000000000
        type: string
      services:
        description: List of services associated with the work range
        items:
          type: object
        type: array
      start_time:
        description: Start time (date ignored)
        example: "09:00"
        format: HH:mm
        type: string
      time_zone:
        description: Timezone in IANA format, e.g., "America/New_York"
        example: America/New_York
        type: string
      weekday:
        description: Weekday (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
        example: 1
        type: integer
    type: object
  DTO.EmployeeWorkSchedule:
    description: represents a work schedule for an employee, which is a collection
      of work ranges.
    properties:
      employee_work_ranges:
        items:
          $ref: '#/definitions/DTO.EmployeeWorkRange'
        type: array
    type: object
  DTO.ErrorResponse:
    description: Error Response Model
    properties:
      message:
        example: Not Found
        type: string
    type: object
  DTO.Holidays:
    properties:
      date:
        example: "2025-01-01T00:00:00Z"
        type: string
      dayMonth:
        example: 01-01
        type: string
      description:
        example: Celebration of the first day of the new year
        type: string
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      name:
        example: New Year's Day
        type: string
      recurrent:
        example: true
        type: boolean
      type:
        example: Public
        type: string
    type: object
  DTO.LoginClient:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: 1SecurePswd!
        type: string
    type: object
  DTO.LoginEmployee:
    properties:
      email:
        example: john.clark@gmail.com
        type: string
      password:
        example: 1SecurePswd!
        type: string
    type: object
  DTO.PasswordReseted:
    properties:
      password:
        type: string
    type: object
  DTO.RolePopulated:
    properties:
      company_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      description:
        example: Administrator role
        type: string
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      is_system_role:
        type: boolean
      name:
        example: admin
        type: string
    type: object
  DTO.Sector:
    properties:
      description:
        example: The Company Sector Description
        type: string
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      name:
        example: Your Company Sector Name
        type: string
    type: object
  DTO.Service:
    description: Service Full DTO
    properties:
      branches:
        items:
          $ref: '#/definitions/DTO.BranchBase'
        type: array
      company_id:
        example: "1"
        type: string
      description:
        example: A 60-minute in-depth business consultation
        type: string
      design:
        $ref: '#/definitions/mJSON.DesignConfig'
      duration:
        example: 60
        type: integer
      employees:
        items:
          $ref: '#/definitions/DTO.EmployeeBase'
        type: array
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      name:
        example: Premium Consultation
        type: string
      price:
        example: 150
        type: integer
    type: object
  DTO.ServiceBase:
    description: Service Base DTO
    properties:
      company_id:
        example: "1"
        type: string
      description:
        example: A 60-minute in-depth business consultation
        type: string
      design:
        $ref: '#/definitions/mJSON.DesignConfig'
      duration:
        example: 60
        type: integer
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      name:
        example: Premium Consultation
        type: string
      price:
        example: 150
        type: integer
    type: object
  DTO.ServiceDensity:
    properties:
      max_schedules_overlap:
        example: 5
        type: integer
      service_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  DTO.ServiceID:
    properties:
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  DTO.Subdomain:
    properties:
      company_id:
        description: Foreign key to Company
        example: 00000000-0000-0000-0000-000000000000
        type: string
      id:
        description: Primary key
        example: 00000000-0000-0000-0000-000000000000
        type: string
      name:
        description: Subdomain name
        example: agenda-yourcompany
        type: string
    type: object
  DTO.UpdateBranch:
    description: Branch Update DTO
    properties:
      company_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      name:
        example: Main Branch Updated
        type: string
      street:
        example: 556 Main St
        type: string
    type: object
  DTO.UpdateEmployeeSwagger:
    properties:
      name:
        example: John
        type: string
      surname:
        example: Clark
        type: string
    type: object
  DTO.UpdateWorkRange:
    properties:
      end_time:
        description: End time (date ignored)
        example: "17:00"
        format: HH:mm
        type: string
      start_time:
        description: Start time (date ignored)
        example: "09:00"
        format: HH:mm
        type: string
      time_zone:
        description: Timezone in IANA format, e.g., "America/New_York"
        example: America/New_York
        type: string
      weekday:
        description: Weekday (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
        example: 1
        type: integer
    type: object
  dJSON.AppointmentHistory:
    properties:
      field_changes:
        items:
          $ref: '#/definitions/dJSON.FieldChange'
        type: array
    type: object
  dJSON.ClientAppointment:
    properties:
      branch_address:
        example: 76, Example street, My city, My country, 09090790
        type: string
      company_id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      company_name:
        example: Company name example
        type: string
      service_name:
        example: Service name example
        type: string
      start_time:
        example: "2021-01-01T09:00:00Z"
        type: string
    type: object
  dJSON.Colors:
    properties:
      primary:
        example: '#FF5733'
        type: string
      quaternary:
        example: '#FF33A1'
        type: string
      secondary:
        example: '#33FF57'
        type: string
      tertiary:
        example: '#3357FF'
        type: string
    type: object
  dJSON.Comment:
    properties:
      comment:
        example: Some comment example text
        type: string
      created_at:
        example: "2021-01-01T09:00:00Z"
        type: string
      created_by:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      deleted_at:
        example: "2021-01-01T09:00:00Z"
        type: string
      from_client:
        example: true
        type: boolean
      from_employee:
        example: false
        type: boolean
      last_updated_by:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      old_versions:
        items:
          $ref: '#/definitions/dJSON.CommentVersion'
        type: array
      type:
        description: '"internal" or "external"'
        example: internal
        type: string
      updated_at:
        example: "2021-01-01T09:00:00Z"
        type: string
    type: object
  dJSON.CommentVersion:
    properties:
      comment:
        example: Some different version comment text
        type: string
      created_at:
        example: "2021-01-01T09:00:00Z"
        type: string
      created_by:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  dJSON.Design:
    properties:
      colors:
        $ref: '#/definitions/dJSON.Colors'
      images:
        $ref: '#/definitions/dJSON.Images'
    type: object
  dJSON.FieldChange:
    properties:
      created_at:
        example: "2021-01-01T09:00:00Z"
        type: string
      field:
        example: field_name
        type: string
      new_value:
        example: new_value
        type: string
      old_value:
        example: old_value
        type: string
      reason:
        example: Some reason.
        type: string
    type: object
  dJSON.Image:
    properties:
      alt:
        example: Image of something
        type: string
      caption:
        example: This is the image we talk about
        type: string
      title:
        example: Title of this image
        type: string
      url:
        example: https://example.com/image.png
        type: string
    type: object
  dJSON.Images:
    properties:
      background:
        $ref: '#/definitions/dJSON.Image'
      banner:
        $ref: '#/definitions/dJSON.Image'
      favicon:
        $ref: '#/definitions/dJSON.Image'
      logo:
        $ref: '#/definitions/dJSON.Image'
      profile:
        $ref: '#/definitions/dJSON.Image'
    type: object
  mJSON.Colors:
    properties:
      primary:
        type: string
      quaternary:
        type: string
      secondary:
        type: string
      tertiary:
        type: string
    type: object
  mJSON.DesignConfig:
    properties:
      colors:
        $ref: '#/definitions/mJSON.Colors'
      images:
        $ref: '#/definitions/mJSON.Images'
    type: object
  mJSON.Image:
    properties:
      alt:
        type: string
      caption:
        type: string
      title:
        type: string
      url:
        type: string
    type: object
  mJSON.Images:
    properties:
      background:
        $ref: '#/definitions/mJSON.Image'
      banner:
        $ref: '#/definitions/mJSON.Image'
      favicon:
        $ref: '#/definitions/mJSON.Image'
      logo:
        $ref: '#/definitions/mJSON.Image'
      profile:
        $ref: '#/definitions/mJSON.Image'
    type: object
info:
  contact: {}
  description: Swagger API for testing and debugging
  termsOfService: http://swagger.io/terms/
  title: GO-Fiber API
  version: "1.0"
paths:
  /appointment:
    post:
      consumes:
      - application/json
      description: Create an appointment
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Appointment
        in: body
        name: appointment
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateAppointment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Appointment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      summary: Create appointment
      tags:
      - Appointment
  /appointment/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an appointment by ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Appointment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      summary: Delete appointment
      tags:
      - Appointment
    get:
      consumes:
      - application/json
      description: Get an appointment by ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Appointment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      summary: Get appointment
      tags:
      - Appointment
    patch:
      consumes:
      - application/json
      description: Update an appointment by ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Appointment
        in: body
        name: appointment
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateAppointment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Appointment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Update appointment
      tags:
      - Appointment
  /branch:
    post:
      consumes:
      - application/json
      description: Create a branch
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch
        in: body
        name: branch
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateBranch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.BranchFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Create branch
      tags:
      - Branch
  /branch/{branch_id}/employee/{employee_id}/services:
    get:
      description: Retrieve all services of an employee included in the branch ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      - description: Employee ID
        in: path
        name: employee_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Get employee services included in the branch ID
      tags:
      - Branch
  /branch/{branch_id}/service/{service_id}:
    delete:
      description: Remove a service from a branch
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.BranchFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Remove service from branch
      tags:
      - Branch
    post:
      description: Add a service to a branch
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.BranchFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Add service to branch
      tags:
      - Branch
  /branch/{id}:
    delete:
      description: Delete a branch by its ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Delete branch by ID
      tags:
      - Branch
    get:
      description: Retrieve a branch by its ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.BranchFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Get branch by ID
      tags:
      - Branch
    patch:
      consumes:
      - application/json
      description: Update a branch
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      - description: Branch
        in: body
        name: branch
        required: true
        schema:
          $ref: '#/definitions/DTO.UpdateBranch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.BranchFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Update branch
      tags:
      - Branch
  /branch/{id}/design/images:
    patch:
      consumes:
      - application/json
      description: Update a branch's images
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      - description: Profile image
        in: formData
        name: profile
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dJSON.Images'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Update branch images
      tags:
      - Branch
  /branch/{id}/design/images/{image_type}:
    delete:
      description: Delete a branch's image
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      - description: Image Type
        in: path
        name: image_type
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dJSON.Images'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Delete branch image
      tags:
      - Branch
  /branch/{id}/work_range/{work_range_id}:
    delete:
      description: Delete a branch's work range
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Range ID
        in: path
        name: work_range_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.BranchWorkRange'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete branch work range
      tags:
      - BranchWorkSchedule
    put:
      description: Update a branch's work range
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Range ID
        in: path
        name: work_range_id
        required: true
        type: string
      - description: Work Range
        in: body
        name: work_range
        required: true
        schema:
          $ref: '#/definitions/DTO.UpdateWorkRange'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.BranchFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update branch work range
      tags:
      - BranchWorkSchedule
  /branch/{id}/work_range/{work_range_id}/service/{service_id}:
    delete:
      description: Remove a service from a branch's work range
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Range ID
        in: path
        name: work_range_id
        required: true
        type: string
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.BranchFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Remove service from branch work range
      tags:
      - BranchWorkSchedule
  /branch/{id}/work_range/{work_range_id}/services:
    post:
      description: Add services to a branch's work range
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Range ID
        in: path
        name: work_range_id
        required: true
        type: string
      - description: Services
        in: body
        name: services
        required: true
        schema:
          items:
            $ref: '#/definitions/DTO.ServiceID'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.BranchFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add services to branch work range
      tags:
      - BranchWorkSchedule
  /branch/{id}/work_schedule:
    post:
      description: Create a work schedule for a branch
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      - description: Branch Work Schedule
        in: body
        name: work_schedule
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateBranchWorkSchedule'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.BranchFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create work schedule for a branch
      tags:
      - BranchWorkSchedule
  /client:
    post:
      consumes:
      - application/json
      description: Create an client
      parameters:
      - description: Client
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateClient'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Create client
      tags:
      - Client
  /client/{id}:
    delete:
      description: Delete an client
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Delete client
      tags:
      - Client
    get:
      description: Retrieve an client by its ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get client by ID
      tags:
      - Client
    patch:
      consumes:
      - application/json
      description: Update an client
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Client
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/DTO.Client'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Update client
      tags:
      - Client
  /client/{id}/appointments:
    get:
      description: Get only the appointments field from a client
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dJSON.ClientAppointment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get client appointments
      tags:
      - Client
  /client/{id}/design/images:
    patch:
      consumes:
      - application/json
      description: Update the design images of an client
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Profile image
        in: formData
        name: profile
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Update client design images
      tags:
      - Client
  /client/{id}/design/images/{image_type}:
    delete:
      description: Delete the design images of an client
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Image Type
        in: path
        name: image_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dJSON.Images'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Delete client design images
      tags:
      - Client
  /client/email/{email}:
    get:
      description: Retrieve an client by its email
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: Client Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Get client by email
      tags:
      - Client
  /client/login:
    post:
      consumes:
      - application/json
      description: Log in an client
      parameters:
      - description: Client
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/DTO.LoginClient'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Login
      tags:
      - Client
  /client/reset-password/{email}:
    post:
      description: Reset the password of a client by its email
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: Client Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.PasswordReseted'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Reset client password by email
      tags:
      - Client
  /client/verify-email/{email}/{code}:
    post:
      consumes:
      - application/json
      description: Verify an client's email
      parameters:
      - description: Client Email
        in: path
        name: email
        required: true
        type: string
      - description: Verification Code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      summary: Verify email
      tags:
      - Client
  /company:
    post:
      consumes:
      - application/json
      description: Create a company
      parameters:
      - description: Company
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateCompany'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.CompanyFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Create company
      tags:
      - Company
  /company/{id}:
    delete:
      description: Delete a company by its ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.CompanyFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Delete company by ID
      tags:
      - Company
    get:
      description: Retrieve a company by its ID
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.CompanyFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get company by ID
      tags:
      - Company
    patch:
      consumes:
      - application/json
      description: Update a company by its ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      - description: Company
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateCompany'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.CompanyFull'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update company by ID
      tags:
      - Company
  /company/{id}/design/colors:
    put:
      consumes:
      - application/json
      description: Update the primary, secondary, tertiary, and quaternary colors
        of a company
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      - description: Colors
        in: body
        name: colors
        required: true
        schema:
          $ref: '#/definitions/mJSON.Colors'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dJSON.Colors'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Update company colors
      tags:
      - Company
  /company/{id}/design/images:
    patch:
      consumes:
      - multipart/form-data
      description: Upload and update design images (logo, banner, etc.)
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      - description: Logo image
        in: formData
        name: logo
        type: file
      - description: Banner image
        in: formData
        name: banner
        type: file
      - description: Favicon image
        in: formData
        name: favicon
        type: file
      - description: Background image
        in: formData
        name: background
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dJSON.Images'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Update company design images
      tags:
      - Company
  /company/{id}/design/images/{image_type}:
    delete:
      description: Delete logo, banner, favicon or background
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      - description: Type of image to delete (logo, banner, favicon, background)
        in: path
        name: image_type
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dJSON.Design'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Delete a specific company design image
      tags:
      - Company
  /company/name/{name}:
    get:
      description: Retrieve a company by its name
      parameters:
      - description: Company Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.CompanyFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get company by name
      tags:
      - Company
  /company/subdomain/{subdomain_name}:
    get:
      description: Retrieve a company by its subdomain
      parameters:
      - description: Subdomain Name
        in: path
        name: subdomain_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.CompanyBase'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get company ID by subdomain
      tags:
      - Company
  /company/tax_id/{tax_id}:
    get:
      description: Retrieve a company by its tax identification number
      parameters:
      - description: Company Tax ID
        in: path
        name: tax_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.CompanyFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get company by tax ID
      tags:
      - Company
  /company/tax_id/{tax_id}/exists:
    get:
      description: Check if a company exists by its tax identification number
      parameters:
      - description: Company Tax ID
        in: path
        name: tax_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Check if company exists by tax ID
      tags:
      - Company
  /employee:
    post:
      consumes:
      - application/json
      description: Create an employee
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateEmployee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Create employee
      tags:
      - Employee - CRUD
  /employee/{employee_id}/branch/{branch_id}:
    delete:
      description: Remove an employee from a branch
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      - description: Employee ID
        in: path
        name: employee_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Remove employee from branch
      tags:
      - Employee - Branches
    post:
      description: Add an employee to a branch
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      - description: Employee ID
        in: path
        name: employee_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Add employee to branch
      tags:
      - Employee - Branches
  /employee/{employee_id}/service/{service_id}:
    delete:
      description: Remove a service from an employee
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: employee_id
        required: true
        type: string
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Remove service from employee
      tags:
      - Employee - Services
    post:
      consumes:
      - application/json
      description: Add a service to an employee
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: employee_id
        required: true
        type: string
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeFull'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add service to employee
      tags:
      - Employee - Services
  /employee/{employee_id}/work_range/{work_range_id}/service/{service_id}:
    delete:
      consumes:
      - application/json
      description: Remove a service from an employee's work range
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: employee_id
        required: true
        type: string
      - description: Work Range ID
        in: path
        name: work_range_id
        required: true
        type: string
      - description: Service ID
        in: path
        name: service_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Remove service from employee's work range
      tags:
      - Employee - WorkSchedule - Services
  /employee/{employee_id}/work_range/{work_range_id}/services:
    post:
      consumes:
      - application/json
      description: Add services to an employee's work range
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: employee_id
        required: true
        type: string
      - description: Work Range ID
        in: path
        name: work_range_id
        required: true
        type: string
      - description: Services
        in: body
        name: services
        required: true
        schema:
          items:
            $ref: '#/definitions/DTO.ServiceID'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Add services to employee's work range
      tags:
      - Employee - WorkSchedule - Services
  /employee/{id}:
    delete:
      description: Delete an employee by its ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Delete employee by ID
      tags:
      - Employee - CRUD
    get:
      description: Retrieve an employee by its ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Get employee by ID
      tags:
      - Employee - CRUD
    patch:
      consumes:
      - application/json
      description: Update an employee
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/DTO.UpdateEmployeeSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Update employee
      tags:
      - Employee - CRUD
  /employee/{id}/design/images:
    patch:
      consumes:
      - application/json
      description: Update the images of an employee
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Profile image
        in: formData
        name: profile
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dJSON.Images'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Update employee images
      tags:
      - Employee - Images
  /employee/{id}/design/images/{image_type}:
    delete:
      description: Delete an image of an employee
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Image Type (logo, banner, favicon, background)
        in: path
        name: image_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dJSON.Images'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Delete employee image
      tags:
      - Employee - Images
  /employee/{id}/work_range/{work_range_id}:
    delete:
      description: Delete a work schedule for an employee
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Range ID
        in: path
        name: work_range_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeWorkSchedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Delete work schedule
      tags:
      - Employee - WorkSchedule
    get:
      description: Retrieve a work range for an employee
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Range ID
        in: path
        name: work_range_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeWorkRange'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Get work range by ID
      tags:
      - Employee - WorkSchedule
    put:
      consumes:
      - application/json
      description: Update a work range for an employee
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Range ID
        in: path
        name: work_range_id
        required: true
        type: string
      - description: Work Range
        in: body
        name: work_range
        required: true
        schema:
          $ref: '#/definitions/DTO.UpdateWorkRange'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Update work range
      tags:
      - Employee - WorkSchedule
  /employee/{id}/work_schedule:
    post:
      consumes:
      - application/json
      description: Create a work schedule for an employee
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Work Schedule
        in: body
        name: work_schedule
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateEmployeeWorkSchedule'
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeWorkSchedule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Create work schedule
      tags:
      - Employee - WorkSchedule
  /employee/email/{email}:
    get:
      description: Retrieve an employee by its email
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.EmployeeFull'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Get employee by email
      tags:
      - Employee - CRUD
  /employee/login:
    post:
      consumes:
      - application/json
      description: Log in an client
      parameters:
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/DTO.LoginEmployee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Login
      tags:
      - Employee - Auth
  /employee/reset-password/{email}:
    post:
      consumes:
      - application/json
      description: Sets a random password of an employee using its email
      parameters:
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.PasswordReseted'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reset employee password to a random value
      tags:
      - Employee - Auth
  /employee/verify-email/{email}/{code}:
    post:
      consumes:
      - application/json
      description: Verify an employee's email
      parameters:
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Employee Email
        in: path
        name: email
        required: true
        type: string
      - description: Verification Code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Verify email
      tags:
      - Employee - Auth
  /holidays:
    post:
      consumes:
      - application/json
      description: Create a holiday
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: Holiday
        in: body
        name: holiday
        required: true
        schema:
          $ref: '#/definitions/DTO.Holidays'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Holidays'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Create holiday
      tags:
      - Holidays
  /holidays/{id}:
    delete:
      description: Delete a holiday by its ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: Holiday ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Holidays'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Delete holiday by ID
      tags:
      - Holidays
    get:
      description: Retrieve a holiday by its ID
      parameters:
      - description: Holiday ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Holidays'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get holiday by ID
      tags:
      - Holidays
    patch:
      consumes:
      - application/json
      description: Update a holiday
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: Holiday ID
        in: path
        name: id
        required: true
        type: string
      - description: Holiday
        in: body
        name: holiday
        required: true
        schema:
          $ref: '#/definitions/DTO.Holidays'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Holidays'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Update holiday
      tags:
      - Holidays
  /holidays/name/{name}:
    get:
      description: Retrieve a holiday by its name
      parameters:
      - description: Holiday Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Holidays'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get holiday by name
      tags:
      - Holidays
  /schedule/options:
    get:
      consumes:
      - application/json
      description: Retrieve schedule options based on filters like branch, employee,
        service, and time.
      parameters:
      - description: Filter by branch ID
        in: query
        name: branch_id
        type: string
      - description: Filter by employee ID
        in: query
        name: employee_id
        type: string
      - description: Filter by service ID
        in: query
        name: service_id
        type: string
      - description: 'Specify what to retrieve: ''services'', ''branches'', ''employees'',
          or ''time_slots'''
        in: query
        name: get
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get schedule options
      tags:
      - Schedule
  /sector:
    post:
      consumes:
      - application/json
      description: Create a sector
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: sector
        in: body
        name: sector
        required: true
        schema:
          $ref: '#/definitions/DTO.Sector'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Sector'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Create sector
      tags:
      - Sector
  /sector/{id}:
    delete:
      description: Delete a sector by its ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: sector ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Sector'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Delete sector by ID
      tags:
      - Sector
    get:
      description: Retrieve a sector by its ID
      parameters:
      - description: sector ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Sector'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get sector by ID
      tags:
      - Sector
    patch:
      consumes:
      - application/json
      description: Update a sector by its ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: sector ID
        in: path
        name: id
        required: true
        type: string
      - description: sector
        in: body
        name: sector
        required: true
        schema:
          $ref: '#/definitions/DTO.Sector'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Sector'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update sector by ID
      tags:
      - Sector
  /sector/name/{name}:
    get:
      description: Retrieve a sector by its ID
      parameters:
      - description: sector ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Sector'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get sector by ID
      tags:
      - Sector
  /service:
    post:
      consumes:
      - application/json
      description: Create a service
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Service
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateService'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Create service
      tags:
      - Service
  /service/{id}:
    delete:
      description: Delete a service by its ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Delete service by ID
      tags:
      - Service
    get:
      description: Retrieve a service by its ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get service by ID
      tags:
      - Service
    patch:
      consumes:
      - application/json
      description: Update a service by its ID
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      - description: Service
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/DTO.Service'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Service'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Update service by ID
      tags:
      - Service
  /service/{id}/design/images:
    patch:
      consumes:
      - multipart/form-data
      description: Update images of a service
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dJSON.Images'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Update service images
      tags:
      - Service
  /service/{id}/design/images/{image_type}:
    delete:
      description: Delete images of a service
      parameters:
      - description: X-Auth-Token
        in: header
        name: X-Auth-Token
        required: true
        type: string
      - description: X-Company-ID
        in: header
        name: X-Company-ID
        required: true
        type: string
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dJSON.Images'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Delete service images
      tags:
      - Service
  /service/name/{name}:
    get:
      description: Retrieve a service by its name
      parameters:
      - description: Service Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get service by name
      tags:
      - Service
securityDefinitions:
  ApiKeyAuth:
    description: |-
      Enter the token in the format: <token>
      Enter the company ID in the format: <company_id>
    in: header
    name: X-Company-ID
    type: apiKey
swagger: "2.0"
