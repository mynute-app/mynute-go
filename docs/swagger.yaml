definitions:
  DTO.Branch:
    properties:
      city:
        example: New York
        type: string
      company_id:
        example: 1
        type: integer
      complement:
        example: Suite 100
        type: string
      country:
        example: USA
        type: string
      employees:
        items:
          $ref: '#/definitions/DTO.UserPopulated'
        type: array
      id:
        example: 1
        type: integer
      name:
        example: Main Branch
        type: string
      neighborhood:
        example: Downtown
        type: string
      number:
        example: "456"
        type: string
      services:
        items:
          $ref: '#/definitions/DTO.ServicePopulated'
        type: array
      state:
        example: NY
        type: string
      street:
        example: 123 Main St
        type: string
      zip_code:
        example: "10001"
        type: string
    type: object
  DTO.BranchPopulated:
    properties:
      city:
        example: New York
        type: string
      complement:
        example: Suite 100
        type: string
      country:
        example: USA
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Main Branch
        type: string
      neighborhood:
        example: Downtown
        type: string
      number:
        example: "456"
        type: string
      state:
        example: NY
        type: string
      street:
        example: 123 Main St
        type: string
      zip_code:
        example: "10001"
        type: string
    type: object
  DTO.Company:
    description: Company Full DTO
    properties:
      branches:
        items:
          $ref: '#/definitions/DTO.Branch'
        type: array
      employees:
        items:
          $ref: '#/definitions/DTO.UserPopulated'
        type: array
      id:
        description: Primary key
        type: integer
      name:
        example: Your Company Name
        type: string
      sectors:
        items:
          $ref: '#/definitions/DTO.Sector'
        type: array
      services:
        items:
          $ref: '#/definitions/DTO.ServicePopulated'
        type: array
      tax_id:
        example: "00000000000000"
        type: string
    type: object
  DTO.CreateBranch:
    properties:
      city:
        example: New York
        type: string
      company_id:
        example: 1
        type: integer
      complement:
        example: Suite 100
        type: string
      country:
        example: USA
        type: string
      name:
        example: Main Branch
        type: string
      neighborhood:
        example: Downtown
        type: string
      number:
        example: "456"
        type: string
      state:
        example: NY
        type: string
      street:
        example: 123 Main St
        type: string
      zip_code:
        example: "10001"
        type: string
    type: object
  DTO.CreateCompany:
    properties:
      name:
        example: Your Company Name
        type: string
      sectors:
        items:
          $ref: '#/definitions/DTO.Sector'
        type: array
      tax_id:
        example: "00000000000000"
        type: string
    type: object
  DTO.CreateEmployee:
    properties:
      company_id:
        example: 1
        type: integer
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John
        type: string
      password:
        example: 1VerySecurePassword!
        type: string
      phone:
        example: "+15555555555"
        type: string
      surname:
        example: Doe
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  DTO.CreateUser:
    properties:
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John
        type: string
      password:
        example: 1VerySecurePassword!
        type: string
      phone:
        example: "+15555555555"
        type: string
      surname:
        example: Doe
        type: string
    type: object
  DTO.Employee:
    properties:
      branches:
        items:
          $ref: '#/definitions/DTO.BranchPopulated'
        type: array
      company_id:
        example: 1
        type: integer
      email:
        example: john.doe@example.com
        type: string
      id:
        type: integer
      name:
        example: John
        type: string
      password:
        example: 1VerySecurePassword!
        type: string
      phone:
        example: "+15555555555"
        type: string
      services:
        items:
          $ref: '#/definitions/DTO.ServicePopulated'
        type: array
      surname:
        example: Doe
        type: string
      tag:
        example:
        - '["super-admin"'
        - ' "branch-manager"]'
        items:
          type: string
        type: array
      user_id:
        example: 1
        type: integer
      verification_code:
        example: "123456"
        type: string
      verified:
        example: false
        type: boolean
    type: object
  DTO.ErrorResponse:
    description: Error Response Model
    properties:
      message:
        example: Not Found
        type: string
    type: object
  DTO.Holidays:
    properties:
      date:
        example: "2025-01-01T00:00:00Z"
        type: string
      dayMonth:
        example: 01-01
        type: string
      description:
        example: Celebration of the first day of the new year
        type: string
      name:
        example: New Year's Day
        type: string
      recurrent:
        example: true
        type: boolean
      type:
        example: Public
        type: string
    type: object
  DTO.LoginUser:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: 1VerySecurePassword!
        type: string
    type: object
  DTO.Sector:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: Your Company Type Name
        type: string
    type: object
  DTO.Service:
    properties:
      branches:
        items:
          $ref: '#/definitions/DTO.Branch'
        type: array
      company_id:
        example: 1
        type: integer
      description:
        example: A 60-minute in-depth business consultation
        type: string
      duration:
        example: 60
        type: integer
      employees:
        items:
          $ref: '#/definitions/DTO.User'
        type: array
      id:
        example: 1
        type: integer
      name:
        example: Premium Consultation
        type: string
      price:
        example: 150
        type: integer
    type: object
  DTO.ServicePopulated:
    properties:
      description:
        example: A 60-minute in-depth business consultation
        type: string
      duration:
        example: 60
        type: integer
      id:
        example: 1
        type: integer
      name:
        example: Premium Consultation
        type: string
      price:
        example: 150
        type: integer
    type: object
  DTO.UpdateBranch:
    properties:
      company_id:
        example: 1
        type: integer
      name:
        example: Main Branch Updated
        type: string
      street:
        example: 556 Main St
        type: string
    type: object
  DTO.UpdateEmployeeSwagger:
    properties:
      name:
        example: John
        type: string
      surname:
        example: Clark
        type: string
    type: object
  DTO.User:
    properties:
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John
        type: string
      password:
        example: 1VerySecurePassword!
        type: string
      phone:
        example: "+15555555555"
        type: string
      surname:
        example: Doe
        type: string
      verification_code:
        example: "123456"
        type: string
      verified:
        example: false
        type: boolean
    type: object
  DTO.UserPopulated:
    properties:
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John
        type: string
      phone:
        example: +1-555-555-5555
        type: string
      surname:
        example: Doe
        type: string
    type: object
info:
  contact: {}
  description: Swagger API for testing and debugging
  termsOfService: http://swagger.io/terms/
  title: Fiber Example API
  version: "1.0"
paths:
  /branch:
    post:
      consumes:
      - application/json
      description: Create a branch
      parameters:
      - description: Branch
        in: body
        name: branch
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateBranch'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/DTO.Branch'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Create branch
      tags:
      - Branch
  /branch/{id}:
    delete:
      description: Delete a branch by its ID
      parameters:
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Branch'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Delete branch by ID
      tags:
      - Branch
    get:
      description: Retrieve a branch by its ID
      parameters:
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Branch'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get branch by ID
      tags:
      - Branch
    patch:
      consumes:
      - application/json
      description: Update a branch
      parameters:
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      - description: Branch
        in: body
        name: branch
        required: true
        schema:
          $ref: '#/definitions/DTO.UpdateBranch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Branch'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Update branch
      tags:
      - Branch
  /company:
    post:
      consumes:
      - application/json
      description: Create a company
      parameters:
      - description: Company
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateCompany'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Create company
      tags:
      - Company
  /company/{id}:
    delete:
      description: Delete a company by its ID
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Company'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Delete company by ID
      tags:
      - Company
    get:
      description: Retrieve a company by its ID
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Company'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get company by ID
      tags:
      - Company
    patch:
      consumes:
      - application/json
      description: Update a company by its ID
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      - description: Company
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/DTO.Company'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/DTO.Company'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Update company by ID
      tags:
      - Company
  /company/name/{name}:
    get:
      description: Retrieve a company by its name
      parameters:
      - description: Company Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Company'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get company by name
      tags:
      - Company
  /company/tax_id/{tax_id}:
    get:
      description: Retrieve a company by its tax identification number
      parameters:
      - description: Company Tax ID
        in: path
        name: tax_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Company'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get company by tax ID
      tags:
      - Company
  /employee:
    post:
      consumes:
      - application/json
      description: Create an employee
      parameters:
      - description: Employee
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateEmployee'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/DTO.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Create employee
      tags:
      - Employee
  /employee/{id}:
    delete:
      description: Delete an employee by its ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Employee'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Delete employee by ID
      tags:
      - Employee
    get:
      description: Retrieve an employee by its ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Employee'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get employee by ID
      tags:
      - Employee
    patch:
      consumes:
      - application/json
      description: Update an employee
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/DTO.UpdateEmployeeSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Update employee
      tags:
      - Employee
  /holidays:
    post:
      consumes:
      - application/json
      description: Create a holiday
      parameters:
      - description: Holiday
        in: body
        name: holiday
        required: true
        schema:
          $ref: '#/definitions/DTO.Holidays'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/DTO.Holidays'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Create holiday
      tags:
      - Holidays
  /holidays/{id}:
    delete:
      description: Delete a holiday by its ID
      parameters:
      - description: Holiday ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Holidays'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Delete holiday by ID
      tags:
      - Holidays
    get:
      description: Retrieve a holiday by its ID
      parameters:
      - description: Holiday ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Holidays'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get holiday by ID
      tags:
      - Holidays
    patch:
      consumes:
      - application/json
      description: Update a holiday
      parameters:
      - description: Holiday ID
        in: path
        name: id
        required: true
        type: string
      - description: Holiday
        in: body
        name: holiday
        required: true
        schema:
          $ref: '#/definitions/DTO.Holidays'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Holidays'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Update holiday
      tags:
      - Holidays
  /holidays/name/{name}:
    get:
      description: Retrieve a holiday by its name
      parameters:
      - description: Holiday Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Holidays'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get holiday by name
      tags:
      - Holidays
  /sector:
    post:
      consumes:
      - application/json
      description: Create a company type
      parameters:
      - description: Company Type
        in: body
        name: sector
        required: true
        schema:
          $ref: '#/definitions/DTO.Sector'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/DTO.Sector'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Create company type
      tags:
      - Sector
  /sector/{id}:
    delete:
      description: Delete a company type by its ID
      parameters:
      - description: Company Type ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Sector'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Delete company type by ID
      tags:
      - Sector
    get:
      description: Retrieve a company type by its ID
      parameters:
      - description: Company Type ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Sector'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get company type by ID
      tags:
      - Sector
    patch:
      consumes:
      - application/json
      description: Update a company type by its ID
      parameters:
      - description: Company Type ID
        in: path
        name: id
        required: true
        type: string
      - description: Company Type
        in: body
        name: sector
        required: true
        schema:
          $ref: '#/definitions/DTO.Sector'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Sector'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Update company type by ID
      tags:
      - Sector
  /service:
    post:
      consumes:
      - application/json
      description: Create a service
      parameters:
      - description: Service
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/DTO.Service'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/DTO.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Create service
      tags:
      - Service
  /service/{id}:
    delete:
      description: Delete a service by its ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Service'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Delete service by ID
      tags:
      - Service
    get:
      description: Retrieve a service by its ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Service'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get service by ID
      tags:
      - Service
    patch:
      consumes:
      - application/json
      description: Update a service by its ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      - description: Service
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/DTO.Service'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Service'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Update service by ID
      tags:
      - Service
  /service/name/{name}:
    get:
      description: Retrieve a service by its name
      parameters:
      - description: Service Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.Service'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get service by name
      tags:
      - Service
  /user:
    post:
      consumes:
      - application/json
      description: Create an user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/DTO.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/DTO.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Create user
      tags:
      - User
  /user/{id}:
    delete:
      description: Delete an user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Delete user
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Update an user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/DTO.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Update user
      tags:
      - User
  /user/email/{email}:
    get:
      description: Retrieve an user by its email
      parameters:
      - description: User Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DTO.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      summary: Get user by email
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/json
      description: Log in an user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/DTO.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/DTO.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Login
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    description: 'Enter the token in the format: <token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
