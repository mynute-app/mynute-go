// func Permissions(t *testing.T) {
// 	server := permissions_test_instance.server
// 	defer server.Shutdown()
// 	company1 := &Company{}
// 	company1.SetupRandomized(t, 4, 3, 6) // owner, 4 employees, 3 branches, 6 services
// 	company2 := &Company{}
// 	company2.SetupRandomized(t, 3, 2, 8) // owner, 3 employees, 2 branch, 8 services
// 	client1 := &Client{}
// 	client1.Set(t)
// 	client2 := &Client{}
// 	client2.Set(t)
// 	http := (&handler.HttpClient{}).SetTest(t)

// 	if company1.owner.auth_token == "" {
// 		t.Fatal("Company 1 Owner auth token is missing")
// 	}
// 	if len(company1.employees) == 0 || company1.employees[0].auth_token == "" {
// 		t.Fatalf("Company 1 Employee[0] auth token is missing (or no employees)")
// 	}
// 	if client1.auth_token == "" || client2.auth_token == "" {
// 		t.Fatal("Client auth tokens are missing")
// 	}

// 	// company1_owner := company1.employees[0]
// 	// company2_owner := company2.employees[0]
// 	company1_employee1 := company1.employees[1]
// 	company1_employee2 := company1.employees[2]
// 	company2_employee1 := company2.employees[1]
// 	company2_employee2 := company2.employees[2]

// 	t.Log("------------------ xxxxxx ------------------")

// 	t.Log("---> Creating appointments for company1_employee1 and client2")
// 	appointmentSlot_1_1_2, found_1_1_2 := findValidAppointmentSlot(t, company1_employee1, company1, preferredLocation)
// 	if !found_1_1_2 {
// 		t.Fatal("Setup failed: Could not find a valid appointment slot for company1_employee1.")
// 	}
// 	http.
// 		Method("POST").
// 		URL("/appointment").
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(map[string]any{
// 			"branch_id":   appointmentSlot_1_1_2.BranchID,
// 			"service_id":  appointmentSlot_1_1_2.ServiceID,
// 			"employee_id": company1_employee1.created.ID.String(),
// 			"company_id":  company1.created.ID.String(),
// 			"client_id":   client2.created.ID.String(),
// 			"start_time":  appointmentSlot_1_1_2.StartTimeRFC3339,
// 		})
// 	_, ok := http.ResBody["id"].(string)
// 	if !ok {
// 		t.Fatal("Failed to get appointment id from response for company1_employee1 and client2")
// 	}
// 	company1.GetById(t, 200)
// 	client2.GetByEmail(t, 200)
// 	company1_employee1.GetById(t, 200)

// 	t.Log("------------------ xxxxxx ------------------")

// 	t.Log("---> Creating appointments for company1_employee2 and client1")
// 	appointmentSlot_1_2_1, found_1_2_1 := findValidAppointmentSlot(t, company1_employee2, company1, preferredLocation)
// 	if !found_1_2_1 {
// 		t.Fatal("Setup failed: Could not find a valid appointment slot for company1_employee2.")
// 	}
// 	http.
// 		Method("POST").
// 		URL("/appointment").
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(map[string]any{
// 			"branch_id":   appointmentSlot_1_2_1.BranchID,
// 			"service_id":  appointmentSlot_1_2_1.ServiceID,
// 			"employee_id": company1_employee2.created.ID.String(),
// 			"company_id":  company1.created.ID.String(),
// 			"client_id":   client1.created.ID.String(),
// 			"start_time":  appointmentSlot_1_2_1.StartTimeRFC3339,
// 		})
// 	_, ok = http.ResBody["id"].(string)
// 	if !ok {
// 		t.Fatal("Failed to get appointment id from response for company1_employee2 and client1")
// 	}
// 	company1.GetById(t, 200)
// 	company1_employee2.GetById(t, 200)
// 	client1.GetByEmail(t, 200)

// 	t.Log("------------------ xxxxxx ------------------")

// 	t.Log("---> Creating appointments for company1_employee2 and client2")
// 	appointmentSlot_1_2_2, found_1_2_2 := findValidAppointmentSlot(t, company1_employee2, company1, preferredLocation)
// 	if !found_1_2_2 {
// 		t.Fatal("Setup failed: Could not find a valid appointment slot for company1_employee2.")
// 	}
// 	http.
// 		Method("POST").
// 		URL("/appointment").
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(map[string]any{
// 			"branch_id":   appointmentSlot_1_2_2.BranchID,
// 			"service_id":  appointmentSlot_1_2_2.ServiceID,
// 			"employee_id": company1_employee2.created.ID.String(),
// 			"company_id":  company1.created.ID.String(),
// 			"client_id":   client2.created.ID.String(),
// 			"start_time":  appointmentSlot_1_2_2.StartTimeRFC3339,
// 		})
// 	_, ok = http.ResBody["id"].(string)
// 	if !ok {
// 		t.Fatal("Failed to get appointment id from response for company1_employee2 and client2")
// 	}
// 	company1.GetById(t, 200)
// 	client2.GetByEmail(t, 200)
// 	company1_employee2.GetById(t, 200)

// 	t.Log("------------------ xxxxxx ------------------")

// 	t.Log("---> Creating appointments for company2_employee1 and client1")
// 	appointmentSlot_2_1_1, found_2_1_1 := findValidAppointmentSlot(t, company2_employee1, company2, preferredLocation)
// 	if !found_2_1_1 {
// 		t.Fatal("Setup failed: Could not find a valid appointment slot for company2_employee1.")
// 	}
// 	http.
// 		Method("POST").
// 		URL("/appointment").
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Header(namespace.HeadersKey.Company, company2.created.ID.String()).
// 		Send(map[string]any{
// 			"branch_id":   appointmentSlot_2_1_1.BranchID,
// 			"service_id":  appointmentSlot_2_1_1.ServiceID,
// 			"employee_id": company2_employee1.created.ID.String(),
// 			"company_id":  company2.created.ID.String(),
// 			"client_id":   client2.created.ID.String(),
// 			"start_time":  appointmentSlot_2_1_1.StartTimeRFC3339,
// 		})

// 	_, ok = http.ResBody["id"].(string)
// 	if !ok {
// 		t.Fatal("Failed to get appointment id from response for company2_employee1 and client2")
// 	}
// 	company2.GetById(t, 200)
// 	client2.GetByEmail(t, 200)
// 	company2_employee1.GetById(t, 200)

// 	t.Log("------------------ xxxxxx ------------------")

// 	t.Log("---> Creating appointments for company2_employee1 and client2")
// 	appointmentSlot_2_1_2, found_2_1_2 := findValidAppointmentSlot(t, company2_employee1, company2, preferredLocation)
// 	if !found_2_1_2 {
// 		t.Fatal("Setup failed: Could not find a valid appointment slot for company2_employee1.")
// 	}
// 	http.
// 		Method("POST").
// 		URL("/appointment").
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Header(namespace.HeadersKey.Company, company2.created.ID.String()).
// 		Send(map[string]any{
// 			"branch_id":   appointmentSlot_2_1_2.BranchID,
// 			"service_id":  appointmentSlot_2_1_2.ServiceID,
// 			"employee_id": company2_employee1.created.ID.String(),
// 			"company_id":  company2.created.ID.String(),
// 			"client_id":   client1.created.ID.String(),
// 			"start_time":  appointmentSlot_2_1_2.StartTimeRFC3339,
// 		})
// 	_, ok = http.ResBody["id"].(string)
// 	if !ok {
// 		t.Fatal("Failed to get appointment id from response for company2_employee1 and client1")
// 	}
// 	company2.GetById(t, 200)
// 	client2.GetByEmail(t, 200)
// 	company2_employee1.GetById(t, 200)

// 	t.Log("------------------ xxxxxx ------------------")

// 	t.Log("---> Creating appointments for company2_employee2 and client1")
// 	appointmentSlot_2_2_1, found_2_2_1 := findValidAppointmentSlot(t, company2_employee2, company2, preferredLocation)
// 	if !found_2_2_1 {
// 		t.Fatal("Setup failed: Could not find a valid appointment slot for company2_employee2.")
// 	}
// 	http.
// 		Method("POST").
// 		URL("/appointment").
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Header(namespace.HeadersKey.Company, company2.created.ID.String()).
// 		Send(map[string]any{
// 			"branch_id":   appointmentSlot_2_2_1.BranchID,
// 			"service_id":  appointmentSlot_2_2_1.ServiceID,
// 			"employee_id": company2_employee2.created.ID.String(),
// 			"company_id":  company2.created.ID.String(),
// 			"client_id":   client1.created.ID.String(),
// 			"start_time":  appointmentSlot_2_2_1.StartTimeRFC3339,
// 		})
// 	_, ok = http.ResBody["id"].(string)
// 	if !ok {
// 		t.Fatal("Failed to get appointment id from response for company2_employee2 and client1")
// 	}
// 	company2.GetById(t, 200)
// 	client1.GetByEmail(t, 200)
// 	company2_employee2.GetById(t, 200)

// 	t.Log("------------------ xxxxxx ------------------")

// 	t.Log("---> Creating appointments for company2_employee2 and client2")
// 	appointmentSlot_2_2_2, found_2_2_2 := findValidAppointmentSlot(t, company2_employee2, company2, preferredLocation)
// 	if !found_2_2_2 {
// 		t.Fatal("Setup failed: Could not find a valid appointment slot for company2_employee2.")
// 	}
// 	http.
// 		Method("POST").
// 		URL("/appointment").
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Header(namespace.HeadersKey.Company, company2.created.ID.String()).
// 		Send(map[string]any{
// 			"branch_id":   appointmentSlot_2_2_2.BranchID,
// 			"service_id":  appointmentSlot_2_2_2.ServiceID,
// 			"employee_id": company2_employee2.created.ID.String(),
// 			"company_id":  company2.created.ID.String(),
// 			"client_id":   client2.created.ID.String(),
// 			"start_time":  appointmentSlot_2_2_2.StartTimeRFC3339,
// 		})
// 	_, ok = http.ResBody["id"].(string)
// 	if !ok {
// 		t.Fatal("Failed to get appointment id from response for company2_employee2 and client2")
// 	}
// 	company2.GetById(t, 200)
// 	client2.GetByEmail(t, 200)
// 	company2_employee2.GetById(t, 200)

// 	t.Log("------------------ xxxxxx ------------------")

// 	t.Log("--- Testing Owner x Appointment Interactions ---")

// 	t.Log("Owner of Company 1 tries to get an appointment from Company 1 : GET /appointment/{id} => 200")
// 	http.
// 		Method("GET").
// 		URL("/appointment/"+company1_employee1.created.Appointments[0].ID.String()).
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, company1.owner.auth_token).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(nil)

// 	t.Log("Owner of Company 1 tries to get an appointment from Company 2 : GET /appointment/{id} => 403")
// 	http.
// 		Method("GET").
// 		URL("/appointment/"+company2_employee1.created.Appointments[0].ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1.owner.auth_token).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(nil)

// 	t.Log("Owner of Company 1 tries to reschedule an appointment from Company 1 : PATCH /appointment/{id} => 200")
// 	appointmentSlot_1_1_1, found_1_1_1 = findValidAppointmentSlot(t, company1_employee1, company1, preferredLocation)
// 	if !found_1_1_1 {
// 		t.Fatal("Setup failed: Could not find a valid appointment slot for rescheduling.")
// 	}

// 	http.
// 		Method("PATCH").
// 		URL("/appointment/"+company1_employee1.created.Appointments[0].ID.String()).
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, company1.owner.auth_token).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(map[string]any{
// 			"start_time": appointmentSlot_1_1_1.StartTimeRFC3339, // Use the found start time
// 		})
// 	company1.GetById(t, 200)
// 	company1_employee1.GetById(t, 200)
// 	client1.GetByEmail(t, 200)

// 	t.Log("Owner of Company 1 tries to reschedule an appointment from Company 2 : PATCH /appointment/{id} => 403")
// 	http.
// 		Method("PATCH").
// 		URL("/appointment/"+company2_employee1.created.Appointments[0].ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1.owner.auth_token).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(map[string]any{
// 			"start_time": appointmentSlot_1_1_1.StartTimeRFC3339, // Use the found start time
// 		})

// 	t.Log("Onwer of Company 1 tries to create an appointment for Client 1 with Employee 1 at Company 1 : POST /appointment => 200")
// 	appointmentSlot_1_1_1, found_1_1_1 = findValidAppointmentSlot(t, company1_employee1, company1, preferredLocation)
// 	if !found_1_1_1 {
// 		t.Fatal("Setup failed: Could not find a valid appointment slot for creating an appointment.")
// 	}
// 	http.
// 		Method("POST").
// 		URL("/appointment").
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, company1.owner.auth_token).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(map[string]any{
// 			"branch_id":   appointmentSlot_1_1_1.BranchID,
// 			"service_id":  appointmentSlot_1_1_1.ServiceID,
// 			"employee_id": company1_employee1.created.ID.String(),
// 			"company_id":  company1.created.ID.String(),
// 			"client_id":   client1.created.ID.String(),
// 			"start_time":  appointmentSlot_1_1_1.StartTimeRFC3339, // Use the found start time
// 		})
// 	_, ok = http.ResBody["id"].(string)
// 	if !ok {
// 		t.Fatal("Failed to get appointment id from response for owner creating appointment for client1")
// 	}
// 	client1.GetByEmail(t, 200)
// 	company1_employee1.GetById(t, 200)

// 	t.Log("--- Testing Client x Appointment Interactions ---")

// 	t.Log("Client 1 tries to get his appointment : GET /appointment/{id} => 200")
// 	http.
// 		Method("GET").
// 		URL("/appointment/"+client1.created.Appointments[0].AppointmentID.String()).
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(nil)

// 	t.Log("Client 1 tries to get Client 2 appointment : GET /appointment/{id} => 403")
// 	http.
// 		Method("GET").
// 		URL("/appointment/"+client2.created.Appointments[0].AppointmentID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(nil)

// 	t.Log("Client 1 tries to reschedule Client 2 appointment : PATCH /appointment/{id} => 403")
// 	next_slot_attempt := findNextAvailableSlotRFC3339(t, company1_employee1, appointmentSlot_1_1_2.StartTimeRFC3339)
// 	http.
// 		Method("PATCH").
// 		URL("/appointment/"+client2.created.Appointments[0].AppointmentID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token). // Client 2 trying to change Client 1's appt
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(map[string]any{
// 			"start_time": next_slot_attempt, // Provide a body even though it should fail
// 		})

// 	next_slot_attempt = findNextAvailableSlotRFC3339(t, company1_employee1, appointmentSlot_1_1_1.StartTimeRFC3339)
// 	t.Log("Client 1 tries to reschedule his appointment : PATCH /appointment/{id} => 200")
// 	http.
// 		Method("PATCH").
// 		URL("/appointment/"+client1.created.Appointments[0].AppointmentID.String()).
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token). // Client 1 changing his own appt
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(map[string]any{
// 			"start_time": next_slot_attempt, // Use the calculated next slot
// 		})

// 	t.Log("Client 1 tries to create an appointment for Client 2 : POST /appointment => 403")
// 	appointmentSlot_1_1_2, found_1_1_2 = findValidAppointmentSlot(t, company1_employee1, company1, preferredLocation)
// 	if !found_1_1_2 {
// 		t.Fatal("Setup failed: Could not find a valid appointment slot for company1_employee1.")
// 	}
// 	http.
// 		Method("POST").
// 		URL("/appointment").
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token). // Client 1 trying to create for Client 2
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Send(map[string]any{
// 			"branch_id":   appointmentSlot_1_1_2.BranchID,
// 			"service_id":  appointmentSlot_1_1_2.ServiceID,
// 			"employee_id": company1_employee1.created.ID.String(),
// 			"company_id":  company1.created.ID.String(),
// 			"client_id":   client2.created.ID.String(), // Different client ID
// 			"start_time":  appointmentSlot_1_1_2.StartTimeRFC3339,
// 		})

// 	t.Log("Client tries to cancel someone else's appointment : DELETE /appointment/{id} => 403")
// 	http.
// 		Method("DELETE").
// 		URL("/appointment/"+client1.created.Appointments[0].AppointmentID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(nil)

// 	t.Log("Client tries to cancel his appointment : DELETE /appointment/{id} => 200")
// 	http.
// 		Method("DELETE").
// 		URL("/appointment/"+client1.created.Appointments[0].AppointmentID.String()).
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Send(nil)
// 	t.Logf("Client 1 deleted appointment %s", client1.created.Appointments[0].AppointmentID.String())

// 	t.Log("--- Testing Client x Branch Interactions ---")
// 	branch0ID := company1.branches[0].created.ID.String()

// 	t.Log("Client tries to get a branch: GET /branch/{id} => 403 (Cannot view branch)")
// 	http.
// 		Method("GET").
// 		URL("/branch/"+branch0ID).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token). // Any logged-in user can view?
// 		Send(nil)

// 	t.Log("Client tries to create a branch: POST /branch => 403 (Cannot create branch)")
// 	http.
// 		Method("POST").
// 		URL("/branch").
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Send(map[string]any{
// 			"company_id": company1.created.ID.String(),
// 			"name":       "Client Branch Test",
// 			"address":    "123 Client St",
// 		})

// 	t.Log("Client tries to edit a branch: PATCH /branch/{id} => 403 (Cannot edit branch)")
// 	http.
// 		Method("PATCH").
// 		URL("/branch/"+branch0ID).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Send(map[string]any{
// 			"name": "Client Edited Branch Name",
// 		})

// 	t.Log("Client tries to delete a branch: DELETE /branch/{id} => 403 (Cannot delete branch)")
// 	http.
// 		Method("DELETE").
// 		URL("/branch/"+branch0ID).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Send(nil)

// 	t.Log("--- Testing Client x Client Interactions ---")
// 	t.Log("Client tries to get a client: GET /client/{id} => 403 (Cannot get other client's details)")
// 	http.
// 		Method("GET").
// 		URL("/client/"+client2.created.ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Send(nil)

// 	t.Log("Client tries to edit a client: PATCH /client/{id} => 403 (Cannot edit other client)")
// 	http.
// 		Method("PATCH").
// 		URL("/client/"+client2.created.ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Send(map[string]any{
// 			"name": "Client Edited Other Client Name",
// 		})

// 	t.Log("Client tries to delete a client: DELETE /client/{id} => 403 (Cannot delete other client)")
// 	http.
// 		Method("DELETE").
// 		URL("/client/"+client2.created.ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Send(nil)

// 	t.Log("Client tries to change something on himself : PATCH /client/{id} => 200")
// 	newClient1Name := "Client 1 New Name"
// 	http.
// 		Method("PATCH").
// 		URL("/client/"+client1.created.ID.String()).
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Send(map[string]any{
// 			"name": newClient1Name,
// 		})

// 	t.Log("Client tries to get himself : GET /client/{id} => 200")
// 	http.
// 		Method("GET").
// 		URL("/client/"+client1.created.ID.String()).
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Send(nil)

// 	t.Log("Client tries to delete himself : DELETE /client/{id} => 200")
// 	http.
// 		Method("DELETE").
// 		URL("/client/"+client1.created.ID.String()).
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client1.auth_token).
// 		Send(nil)
// 	t.Logf("Client 1 deleted himself (%s)", client1.created.ID.String())

// 	// --- Client x Company --- Interactions ---
// 	t.Log("--- Testing Client x Company Interactions ---")
// 	if client2.auth_token == "" {
// 		t.Fatal("Client 2 auth token missing for subsequent tests")
// 	}

// 	t.Log("Client tries to get a company : GET /company/{id} => 200")
// 	http.
// 		Method("GET").
// 		URL("/company/"+company1.created.ID.String()).
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(nil)

// 	t.Log("Client tries to get all companies : GET /company => 403 (Listing all companies usually restricted)")
// 	http.
// 		Method("GET").
// 		URL("/company").
// 		ExpectStatus(405).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(nil)

// 	t.Log("Client tries to change something in a company : PATCH /company/{id} => 403 (Not allowed)")
// 	http.
// 		Method("PATCH").
// 		URL("/company/"+company1.created.ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(map[string]any{
// 			"name": "Client Edited Company Name",
// 		})

// 	t.Log("Client tries to delete a company : DELETE /company/{id} => 403 (Not implemented or forbidden)")
// 	http.
// 		Method("DELETE").
// 		URL("/company/"+company1.created.ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(nil)

// 	// --- Client x Employee --- Interactions ---
// 	t.Log("--- Testing Client x Employee Interactions ---")
// 	t.Log("Client tries to get an employee : GET /employee/{id} => 200 (Needed for booking)")
// 	http.
// 		Method("GET").
// 		URL("/employee/"+company1_employee1.created.ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(nil)

// 	t.Log("Client tries to create an employee : POST /employee => 403 (Forbidden)")
// 	http.
// 		Method("POST").
// 		URL("/employee").
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(map[string]any{
// 			"company_id": company1.created.ID.String(),
// 			"name":       "Client Created Employee",
// 			"email":      fmt.Sprintf("clientemp%d@test.com", time.Now().UnixNano()),
// 			"phone":      "222333444",
// 		})

// 	t.Log("Client tries to edit an employee : PATCH /employee/{id} => 403 (Forbidden)")
// 	http.
// 		Method("PATCH").
// 		URL("/employee/"+company1_employee1.created.ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(map[string]any{
// 			"name": "Client Edited Employee Name",
// 		})

// 	t.Log("Client tries to delete an employee : DELETE /employee/{id} => 403 (Forbidden)")
// 	http.
// 		Method("DELETE").
// 		URL("/employee/"+company1_employee1.created.ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(nil)

// 	// --- Client x Role --- Interactions ---
// 	t.Log("--- Testing Client x Role Interactions ---")
// 	// roleID := employee0.created.Roles[0].ID.String() // Assuming employee has at least one role
// 	// // Client tries to get a role : GET /role/{id} => 200 (Possibly public info)
// 	// http.
// 	// 	Method("GET").
// 	// 	URL("/role/"+roleID).
// 	// 	ExpectStatus(200).
// 	// 	Header(namespace.HeadersKey.Auth, client2.auth_token).
// 	// 	Send(nil)

// 	// // Client tries to get all roles : GET /role => 404 (Endpoint might not exist or be public)
// 	// http.
// 	// 	Method("GET").
// 	// 	URL("/role").
// 	// 	ExpectStatus(404). // As per original comment
// 	// 	Header(namespace.HeadersKey.Auth, client2.auth_token).
// 	// 	Send(nil)

// 	// // Client tries to create a role : POST /role => 403
// 	// http.
// 	// 	Method("POST").
// 	// 	URL("/role").
// 	// 	ExpectStatus(403).
// 	// 	Header(namespace.HeadersKey.Auth, client2.auth_token).
// 	// 	Send(map[string]any{
// 	// 		"company_id": company1.created.ID.String(),
// 	// 		"name":       "Client Role",
// 	// 	})

// 	// // Client tries to edit a role : PATCH /role/{id} => 403
// 	// http.
// 	// 	Method("PATCH").
// 	// 	URL("/role/"+roleID).
// 	// 	ExpectStatus(403).
// 	// 	Header(namespace.HeadersKey.Auth, client2.auth_token).
// 	// 	Send(map[string]any{
// 	// 		"name": "Client Edited Role",
// 	// 	})

// 	// // Client tries to delete a role : DELETE /role/{id} => 403
// 	// http.
// 	// 	Method("DELETE").
// 	// 	URL("/role/"+roleID).
// 	// 	ExpectStatus(403).
// 	// 	Header(namespace.HeadersKey.Auth, client2.auth_token).
// 	// 	Send(nil)

// 	// --- Client x Sector --- Interactions ---
// 	t.Log("--- Testing Client x Sector Interactions ---")
// 	// sectorID := company1.created.Sectors[0].ID.String()
// 	// Client tries to get a sector : GET /sector/{id} => 200 (Public classification)
// 	// http.
// 	// 	Method("GET").
// 	// 	URL("/sector/"+sectorID).
// 	// 	ExpectStatus(200).
// 	// 	Header(namespace.HeadersKey.Auth, client2.auth_token).
// 	// 	Send(nil)

// 	// // Client tries to get all sectors : GET /sector => 200 (Public listing)
// 	// http.
// 	// 	Method("GET").
// 	// 	URL("/sector").
// 	// 	ExpectStatus(200).
// 	// 	Header(namespace.HeadersKey.Auth, client2.auth_token).
// 	// 	Send(nil)

// 	// // Client tries to create a sector : POST /sector => 403
// 	// http.
// 	// 	Method("POST").
// 	// 	URL("/sector").
// 	// 	ExpectStatus(403).
// 	// 	Header(namespace.HeadersKey.Auth, client2.auth_token).
// 	// 	Send(map[string]any{
// 	// 		"name": "Client Sector",
// 	// 	})

// 	// // Client tries to edit a sector : PATCH /sector/{id} => 403
// 	// http.
// 	// 	Method("PATCH").
// 	// 	URL("/sector/"+sectorID).
// 	// 	ExpectStatus(403).
// 	// 	Header(namespace.HeadersKey.Auth, client2.auth_token).
// 	// 	Send(map[string]any{
// 	// 		"name": "Client Edited Sector",
// 	// 	})

// 	// // Client tries to delete a sector : DELETE /sector/{id} => 403
// 	// http.
// 	// 	Method("DELETE").
// 	// 	URL("/sector/"+sectorID).
// 	// 	ExpectStatus(403).
// 	// 	Header(namespace.HeadersKey.Auth, client2.auth_token).
// 	// 	Send(nil)

// 	// --- Client x Service --- Interactions ---
// 	t.Log("--- Testing Client x Service Interactions ---")
// 	service0ID := company1.services[0].created.ID.String()

// 	t.Log("Client tries to get a service : GET /service/{id} => 200")
// 	http.
// 		Method("GET").
// 		URL("/service/"+service0ID).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(nil)

// 	t.Log("Client tries to create a service : POST /service => 403")
// 	http.
// 		Method("POST").
// 		URL("/service").
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(map[string]any{
// 			"company_id": company1.created.ID.String(),
// 			"name":       "Client Service",
// 			"price":      10.50,
// 			"duration":   30,
// 		})

// 	t.Log("Client tries to edit a service : PATCH /service/{id} => 403")
// 	http.
// 		Method("PATCH").
// 		URL("/service/"+service0ID).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(map[string]any{
// 			"name": "Client Edited Service",
// 		})

// 	t.Log("Client tries to delete a service : DELETE /service/{id} => 403")
// 	http.
// 		Method("DELETE").
// 		URL("/service/"+service0ID).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 		Header(namespace.HeadersKey.Auth, client2.auth_token).
// 		Send(nil)

// 	// --- Setup for Employee Tests ---
// 	t.Log("--- Setting up for Employee Interactions ---")
// 	// t.Log("Creating an appointment for employee0 to test employee interactions")
// 	// var employee0AppointmentID string
// 	// http.
// 	// 	Method("POST").
// 	// 	URL("/appointment").
// 	// 	ExpectStatus(200).
// 	// 	Header(namespace.HeadersKey.Auth, company1.owner.auth_token). // Owner creates appt for client2 with employee0
// 	// 	Send(map[string]any{
// 	// 		"branch_id":   appointmentSlot.BranchID,
// 	// 		"service_id":  appointmentSlot.ServiceID,
// 	// 		"employee_id": company1_employee1.created.ID.String(),
// 	// 		"company_id":  company1.created.ID.String(),
// 	// 		"client_id":   client2.created.ID.String(),
// 	// 		"start_time":  appointmentSlot.StartTimeRFC3339,
// 	// 	})
// 	// employee0AppointmentID, ok = http.ResBody["id"].(string)
// 	// if !ok {
// 	// 	t.Fatal("Failed to get appointment id created by owner for employee0")
// 	// }
// 	// t.Logf("Owner created appointment %s for employee %s with client %s", employee0AppointmentID, company1_employee1.created.ID.String(), client2.created.ID.String())

// 	// // Create an appointment for employee1 (if exists) booked by client2 for permission testing
// 	// var otherEmployeeAppointmentID string
// 	// if len(company1.employees) > 1 {
// 	// 	employee1 := company1.employees[1]
// 	// 	employee1ID := employee1.created.ID.String()

// 	// 	// --- CORRECTED PART ---
// 	// 	// Use findValidAppointmentSlot for employee1 to get a proper RFC3339 slot
// 	// 	// You might need to ensure preferredLocation is defined earlier in this test, e.g.:
// 	// 	// preferredLocation := time.UTC // Or time.Local, consistent with first slot search

// 	// 	slotForEmployee1, foundSlotForEmployee1 := findValidAppointmentSlot(t, employee1, company1, preferredLocation)

// 	// 	if foundSlotForEmployee1 {
// 	// 		t.Logf("Found valid slot for employee1: Branch %s, Service %s, Time %s",
// 	// 			slotForEmployee1.BranchID, slotForEmployee1.ServiceID, slotForEmployee1.StartTimeRFC3339)

// 	// 		http.
// 	// 			Method("POST").
// 	// 			URL("/appointment").
// 	// 			ExpectStatus(200).
// 	// 			Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 	// 			Header(namespace.HeadersKey.Auth, company1.owner.auth_token). // Owner creates
// 	// 			Send(map[string]any{
// 	// 				"branch_id":   slotForEmployee1.BranchID,  // Use details from the found slot
// 	// 				"service_id":  slotForEmployee1.ServiceID, // Use details from the found slot
// 	// 				"employee_id": employee1ID,                // Correct employee
// 	// 				"company_id":  company1.created.ID.String(),
// 	// 				"client_id":   client2.created.ID.String(),       // Booking for client 2
// 	// 				"start_time":  slotForEmployee1.StartTimeRFC3339, // *** CRUCIAL: Use RFC3339 string ***
// 	// 			})
// 	// 		var ok bool
// 	// 		otherEmployeeAppointmentID, ok = http.ResBody["id"].(string)
// 	// 		if !ok {
// 	// 			t.Logf("Warning: Failed to get appointment id for employee1 %s after finding slot", employee1ID)
// 	// 			otherEmployeeAppointmentID = "" // Mark as unavailable
// 	// 		} else {
// 	// 			t.Logf("Owner created appointment %s for employee %s with client %s", otherEmployeeAppointmentID, employee1ID, client2.created.ID.String())
// 	// 		}
// 	// 	} else {
// 	// 		t.Logf("Warning: No valid appointment slot found for employee %s using findValidAppointmentSlot. Skipping 'other employee' appt test.", employee1ID)
// 	// 		otherEmployeeAppointmentID = "" // Ensure it's reset if no slot found
// 	// 	}
// 	// 	// --- END CORRECTED PART ---
// 	// } else {
// 	// 	t.Log("Warning: Only one employee available, skipping 'other employee' appointment tests")
// 	// }
// 	// if len(company1.employees) > 1 {
// 	// 	employee1 := company1.employees[1]
// 	// 	employee1ID := employee1.created.ID.String()
// 	// 	employee1Branch0 := employee1.branches[0].created.ID.String()  // Assume branch access
// 	// 	employee1Service0 := employee1.services[0].created.ID.String() // Assume service access
// 	// 	var employee1StartTime string
// 	// 	// Find start time for employee1
// 	// 	schedule1 := employee1.created.EmployeeWorkSchedule
// 	// 	days1 := [][]mJSON.WorkRange{schedule1.Monday, schedule1.Tuesday, schedule1.Wednesday, schedule1.Thursday, schedule1.Friday, schedule1.Saturday, schedule1.Sunday}
// 	// 	foundTime1 := false
// 	// 	for _, day := range days1 {
// 	// 		if len(day) > 0 {
// 	// 			employee1StartTime = day[0].Start
// 	// 			foundTime1 = true
// 	// 			break
// 	// 		}
// 	// 	}
// 	// 	if foundTime1 {
// 	// 		http.
// 	// 			Method("POST").
// 	// 			URL("/appointment").
// 	// 			ExpectStatus(200).
// 	// 			Header(namespace.HeadersKey.Company, company1.created.ID.String()).             // Company ID needed for employee
// 	// 			Header(namespace.HeadersKey.Auth, company1.owner.auth_token). // Owner creates
// 	// 			Send(map[string]any{
// 	// 				"branch_id":   employee1Branch0,
// 	// 				"service_id":  employee1Service0,
// 	// 				"employee_id": employee1ID,
// 	// 				"company_id":  company1.created.ID.String(),
// 	// 				"client_id":   client2.created.ID.String(), // Use client2 again
// 	// 				"start_time":  employee1StartTime,
// 	// 			})
// 	// 		otherEmployeeAppointmentID, ok = http.ResBody["id"].(string)
// 	// 		if !ok {
// 	// 			t.Logf("Warning: Failed to get appointment id for employee1 %s", employee1ID)
// 	// 			otherEmployeeAppointmentID = "" // Mark as unavailable
// 	// 		} else {
// 	// 			t.Logf("Owner created appointment %s for employee %s with client %s", otherEmployeeAppointmentID, employee1ID, client2.created.ID.String())
// 	// 		}
// 	// 	} else {
// 	// 		t.Logf("Warning: No work schedule found for employee %s, skipping other employee appt test", employee1ID)
// 	// 	}
// 	// } else {
// 	// 	t.Log("Warning: Only one employee available, skipping 'other employee' appointment tests")
// 	// }

// 	// --- Employee x Appointments --- Interactions ---
// 	t.Log("--- Testing Employee x Appointment Interactions ---")
// 	// company1_employee1.auth_token := company1_employee1.auth_token
// 	// if company1_employee1.auth_token == "" {
// 	// 	t.Fatal("Employee 0 auth token is missing for tests")
// 	// }

// 	// t.Log("Employee tries to get his appointment : GET /appointment/{id} => 200")
// 	// http.
// 	// 	Method("GET").
// 	// 	URL("/appointment/"+employee0AppointmentID).
// 	// 	ExpectStatus(200).
// 	// 	Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 	// 	Header(namespace.HeadersKey.Auth, employee0AuthToken).
// 	// 	Send(nil)

// 	// if otherEmployeeAppointmentID != "" {
// 	// 	t.Log("Employee tries to get someone else's appointment : GET /appointment/{id} => 403")
// 	// 	http.
// 	// 		Method("GET").
// 	// 		URL("/appointment/"+otherEmployeeAppointmentID).
// 	// 		ExpectStatus(403).
// 	// 		Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 	// 		Header(namespace.HeadersKey.Auth, employee0AuthToken).
// 	// 		Send(nil)
// 	// } else {
// 	// 	t.Log("Skipping test: get someone else's appointment (no other employee appointment available)")
// 	// }

// 	// t.Log("Employee tries to reschedule his appointment : PATCH /appointment/{id} => 200")
// 	// var employeeCreatedApptID string
// 	// next_slot_for_employee_booking := findNextAvailableSlotRFC3339(t, company1_employee1, appointmentSlot.StartTimeRFC3339)
// 	// http.
// 	// 	Method("POST").
// 	// 	URL("/appointment").
// 	// 	ExpectStatus(200).
// 	// 	Header(namespace.HeadersKey.Auth, employee0AuthToken). // Employee making the booking
// 	// 	Header(namespace.HeadersKey.Company, company1.created.ID.String()).
// 	// 	Send(map[string]any{
// 	// 		"branch_id":   appointmentSlot.BranchID,
// 	// 		"service_id":  appointmentSlot.ServiceID,
// 	// 		"employee_id": company1_employee1.created.ID.String(), // Booking is for himself
// 	// 		"company_id":  company1.created.ID.String(),
// 	// 		"client_id":   client2.created.ID.String(), // Booking *for* client 2
// 	// 		"start_time":  next_slot_for_employee_booking,
// 	// 	})
// 	// employeeCreatedApptID, ok = http.ResBody["id"].(string)
// 	// if !ok {
// 	// 	t.Log("Warning: Failed to get ID for appointment created by employee")
// 	// } else {
// 	// 	t.Logf("Employee %s created appointment %s for client %s", company1_employee1.created.ID.String(), employeeCreatedApptID, client2.created.ID.String())
// 	// }

// 	// // Employee tries to edit his appointment : PATCH /appointment/{id} => 404 (Endpoint/action not allowed/found for employee?)
// 	// // Using the appointment originally created by the owner for this employee
// 	// t.Log("Employee tries to edit his appointment : PATCH /appointment/{id} => 404")
// 	// http.
// 	// 	Method("PATCH").
// 	// 	URL("/appointment/"+employee0AppointmentID).
// 	// 	ExpectStatus(404).
// 	// 	Header(namespace.HeadersKey.Auth, employee0AuthToken).
// 	// 	Send(map[string]any{
// 	// 		"start_time": next_slot_for_employee_booking, // Attempt change
// 	// 	})

// 	// // Employee tries to delete his appointment : DELETE /appointment/{id} => 404 (Endpoint/action not allowed/found for employee?)
// 	// // Using the appointment originally created by the owner for this employee
// 	// t.Log("Employee tries to delete his appointment : DELETE /appointment/{id} => 404")
// 	// http.
// 	// 	Method("DELETE").
// 	// 	URL("/appointment/"+employee0AppointmentID).
// 	// 	ExpectStatus(404). // Following comment expectation
// 	// 	Header(namespace.HeadersKey.Auth, employee0AuthToken).
// 	// 	Send(nil)

// 	// if otherEmployeeAppointmentID != "" {
// 	// 	t.Log("Re-test: Employee tries to get someone else's appointment : GET /appointment/{id} => 403")
// 	// 	http.
// 	// 		Method("GET").
// 	// 		URL("/appointment/"+otherEmployeeAppointmentID).
// 	// 		ExpectStatus(403).
// 	// 		Header(namespace.HeadersKey.Auth, employee0AuthToken).
// 	// 		Send(nil)
// 	// } // Skipped if no other appt

// 	// // Employee tries to edit someone else's appointment : PATCH /appointment/{id} => 403 (Permission denied)
// 	// if otherEmployeeAppointmentID != "" {
// 	// 	t.Log("Employee tries to edit someone else's appointment : PATCH /appointment/{id} => 403")
// 	// 	http.
// 	// 		Method("PATCH").
// 	// 		URL("/appointment/"+otherEmployeeAppointmentID).
// 	// 		ExpectStatus(403). // Should be forbidden (or 404 if PATCH route is generally unavailable to employees)
// 	// 		Header(namespace.HeadersKey.Auth, employee0AuthToken).
// 	// 		Send(map[string]any{
// 	// 			"start_time": next_slot_for_employee_booking,
// 	// 		})
// 	// } else {
// 	// 	t.Log("Skipping test: edit someone else's appointment (no other employee appointment available)")
// 	// }

// 	// // Employee tries to delete someone else's appointment : DELETE /appointment/{id} => 403 (Permission denied)
// 	// if otherEmployeeAppointmentID != "" {
// 	// 	t.Log("Employee tries to delete someone else's appointment : DELETE /appointment/{id} => 403")
// 	// 	http.
// 	// 		Method("DELETE").
// 	// 		URL("/appointment/"+otherEmployeeAppointmentID).
// 	// 		ExpectStatus(403). // Should be forbidden (or 404 if DELETE route unavailable)
// 	// 		Header(namespace.HeadersKey.Auth, employee0AuthToken).
// 	// 		Send(nil)
// 	// } else {
// 	// 	t.Log("Skipping test: delete someone else's appointment (no other employee appointment available)")
// 	// }
// 	// // Clean up employee-created appointment if ID was captured
// 	// if employeeCreatedApptID != "" {
// 	// 	// Cancellation might need owner/client permission or specific endpoint, using owner for cleanup
// 	// 	t.Logf("Cleaning up employee-created appointment %s using owner token", employeeCreatedApptID)
// 	// 	http.
// 	// 		Method("DELETE").
// 	// 		URL("/appointment/"+employeeCreatedApptID).
// 	// 		ExpectStatus(200). // Assume owner can delete any appt in their company
// 	// 		Header(namespace.HeadersKey.Auth, company1.owner.auth_token).
// 	// 		Send(nil)
// 	// 	t.Logf("Cleaned up employee-created appointment %s using owner token", employeeCreatedApptID)
// 	// }

// 	// --- Employee x Company --- Interactions ---
// 	t.Log("--- Testing Employee x Company Interactions ---")
// 	// Employee tries to get a company : GET /company/{id} => 403 (Assume restricted internal info)
// 	t.Log("Employee tries to get a company : GET /company/{id} => 403")
// 	http.
// 		Method("GET").
// 		URL("/company/"+company1.created.ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token).
// 		Send(nil)

// 	// Employee tries to get all companies : GET /company => 403 (Definitely restricted)
// 	t.Log("Employee tries to get all companies : GET /company => 500")
// 	http.
// 		Method("GET").
// 		URL("/company").
// 		ExpectStatus(405).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token).
// 		Send(nil)

// 	// Employee tries to change something in a company : PATCH /company/{id} => 403
// 	http.
// 		Method("PATCH").
// 		URL("/company/"+company1.created.ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token).
// 		Send(map[string]any{
// 			"name": "Employee Edited Company Name",
// 		})

// 	// Employee tries to delete a company : DELETE /company/{id} => 403
// 	http.
// 		Method("DELETE").
// 		URL("/company/"+company1.created.ID.String()).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token).
// 		Send(nil)

// 	// --- Employee x Branch --- Interactions ---
// 	t.Log("--- Testing Employee x Branch Interactions ---")
// 	// Employee tries to get a branch : GET /branch/{id} => 403 (Assume restricted)
// 	http.
// 		Method("GET").
// 		URL("/branch/"+branch0ID).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token).
// 		Send(nil)

// 	// Employee tries to create a branch : POST /branch => 403
// 	http.
// 		Method("POST").
// 		URL("/branch").
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token).
// 		Send(map[string]any{
// 			"company_id": company1.created.ID.String(),
// 			"name":       "Employee Branch",
// 			"address":    "456 Employee Ave",
// 		})

// 	// Employee tries to edit a branch : PATCH /branch/{id} => 403
// 	http.
// 		Method("PATCH").
// 		URL("/branch/"+branch0ID).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token).
// 		Send(map[string]any{
// 			"name": "Employee Edited Branch Name",
// 		})

// 	// Employee tries to delete a branch : DELETE /branch/{id} => 403
// 	http.
// 		Method("DELETE").
// 		URL("/branch/"+branch0ID).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token).
// 		Send(nil)

// 	// --- Employee x Service --- Interactions ---
// 	t.Log("--- Testing Employee x Service Interactions ---")
// 	// Employee tries to get a service : GET /service/{id} => 200 (Needed for work)
// 	http.
// 		Method("GET").
// 		URL("/service/"+service0ID).
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token).
// 		Send(nil)

// 	// Employee tries to create a service : POST /service => 403
// 	http.
// 		Method("POST").
// 		URL("/service").
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token).
// 		Send(map[string]any{
// 			"company_id": company1.created.ID.String(),
// 			"name":       "Employee Service",
// 			"price":      20.00,
// 			"duration":   60,
// 		})

// 	// Employee tries to edit a service : PATCH /service/{id} => 403
// 	http.
// 		Method("PATCH").
// 		URL("/service/"+service0ID).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token).
// 		Send(map[string]any{
// 			"name": "Employee Edited Service",
// 		})

// 	// Employee tries to delete a service : DELETE /service/{id} => 403
// 	http.
// 		Method("DELETE").
// 		URL("/service/"+service0ID).
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token).
// 		Send(nil)

// 	// Employee tries to add a service to himself : POST /employee/{id}/service/{id} => 403 (Assume only Owner/Admin can)
// 	// Let's use service[1] from company1 if available
// 	service1ID := ""
// 	if len(company1.services) > 1 {
// 		service1ID = company1.services[1].created.ID.String()
// 		http.
// 			Method("POST").
// 			URL("/employee/"+company1_employee1.created.ID.String()+"/service/"+service1ID).
// 			ExpectStatus(403).
// 			Header(namespace.HeadersKey.Auth, company1_employee1.auth_token). // Employee trying to add to himself
// 			Send(nil)
// 	} else {
// 		t.Log("Skipping test: employee add service to self (only one service defined)")
// 	}

// 	// Owner adds service[0] to employee[0] (this test already existed, added log)
// 	http.
// 		Method("POST").
// 		URL("/employee/"+company1_employee1.created.ID.String()+"/service/"+service0ID).
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, company1.owner.auth_token). // Owner performs action
// 		Send(nil)
// 	t.Logf("Owner added service %s to employee %s", service0ID, company1_employee1.created.ID.String())

// 	// Employee tries to remove a service from himself : DELETE /employee/{id}/service/{id} => 403 (Assume only Owner/Admin can)
// 	http.
// 		Method("DELETE").
// 		URL("/employee/"+company1_employee1.created.ID.String()+"/service/"+service0ID). // Try to remove the service added by owner
// 		ExpectStatus(403).
// 		Header(namespace.HeadersKey.Auth, company1_employee1.auth_token). // Employee trying action
// 		Send(nil)

// 	// Owner removes service from employee: DELETE /employee/{id}/service/{id} => 200 (Cleanup / successful case)
// 	http.
// 		Method("DELETE").
// 		URL("/employee/"+company1_employee1.created.ID.String()+"/service/"+service0ID).
// 		ExpectStatus(200).
// 		Header(namespace.HeadersKey.Auth, company1.owner.auth_token). // Owner performs action
// 		Send(nil)
// 	t.Logf("Owner removed service %s from employee %s", service0ID, company1_employee1.created.ID.String())

// }
